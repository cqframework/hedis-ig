{
  "resourceType": "Library",
  "id": "library-pvs-logic",
  "text": {
      "status": "generated",
      "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-pvs-logic/_history/3</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"11\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1326</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1325</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1024</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1439</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1440</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1448</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1449</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1139</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1447</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1439</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1440</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nPneumococcal Vaccination Status of Older Adults (PVS)\n*/library PVS_FHIR version '1.0.0'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nMeasure Description\nThe percentage of members 65 years of age and older who have ever received\nthe recommended series of pneumococcal vaccines: 13-valent pneumococcal\nconjugate vaccine (PCV13) and 23-valent pneumococcal polysaccharide vaccine (PPSV23).\n*/\n\n// valueset \"Anaphylactic Reaction Due to Vaccine\": 'urn:oid:2.16.840.1.113883.3.464.1003.199.12.1027' // Grouping Value Set\n// valueset \"Cerebrospinal Fluid Leaks\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Functional or Aplastic Anemia\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Disorders of the Immune System\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Pneumococcal Conjugate Vaccine 13\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Pneumococcal Conjugate Vaccine 23\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Bone Marrow Transplant\": 'urn:oid:2.16.840.1.113883.3.666.5.336' // Grouping Value Set\n// valueset \"Chemotherapy\": 'urn:oid:2.16.840.1.113762.1.4.1047.451' // Grouping Value Set\n// valueset \"Cochlear Implants\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n\n// update\r\n\r\nvalueset \"Anaphylactic Reaction Due to Serum\": '2.16.840.1.113883.3.464.1004.1023'\r\nvalueset \"Anaphylactic Reaction Due to Vaccine\": '2.16.840.1.113883.3.464.1004.1024'\r\nvalueset \"Bone Marrow Transplant\": '2.16.840.1.113883.3.464.1004.1325'\r\nvalueset \"Bone Marrow Transplant SNOMED\": '2.16.840.1.113883.3.464.1004.1442'\r\nvalueset \"Cerebrospinal Fluid Leaks\": '2.16.840.1.113883.3.464.1004.1448'\r\nvalueset \"Chemotherapy\": '2.16.840.1.113883.3.464.1004.1326'\r\nvalueset \"Chemotherapy SNOMED/CPT\": '2.16.840.1.113883.3.464.1004.1441'\r\nvalueset \"Cochlear Implants\": '2.16.840.1.113883.3.464.1004.1447'\r\nvalueset \"Disorders of the Immune System\": '2.16.840.1.113883.3.464.1004.1139'\r\nvalueset \"Functional or Aplastic Anemia\": '2.16.840.1.113883.3.464.1004.1449'\n// valueset \"Hospice\": '2.16.840.1.113883.3.464.1004.1418'\r\nvalueset \"Pneumococcal Conjugate Vaccine 13\": '2.16.840.1.113883.3.464.1004.1439'\r\nvalueset \"Pneumococcal Conjugate Vaccine 23\": '2.16.840.1.113883.3.464.1004.1440'\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\n\n/*\nExclusions\n*/\r\n\r\ndefine \"Denominator Exclusion\":\r\n  exists ( \"Chemotherapy and Bone Marrow Transplant Procedures\" ProcedureUnion\r\n      where ProcedureUnion.status.value in { 'in-progress', 'completed' }\r\n        and PeriodToIntervalOfDT(ProcedureUnion.performed)overlaps day of \"Measurement Period\"\r\n  )\r\n    or exists ( [DiagnosticReport: \"Anaphylactic Reaction Due to Vaccine\"] ReactionToVaccine\r\n        where ReactionToVaccine.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n          and start of PeriodToIntervalOfDT(ReactionToVaccine.effective)before day of \"Measurement Period\"\r\n    )\r\n\r\ndefine \"Chemotherapy and Bone Marrow Transplant Procedures\":\r\n  [Procedure: \"Chemotherapy\"]\r\n    union [Procedure: \"Bone Marrow Transplant\"]\n\n/*\nDenominators and Numerators\n*/\r\n\r\ndefine \"Denominator\":\r\n  \"Initial Population\"\n\n// TODO: The Numerator logic in the spec appears to have contradictions\n// with the intent of the spec, such as AND meaning union vs intersection;\n// this logic should be given another review.\r\n\r\ndefine \"Numerator\":\r\n  \"Initial Population\"\r\n    and ( \"PVC13 After Age 60 And Then PVC23 After 12 More Months\"\r\n        or \"PVC13 After Age 2 And Then PVC23 After 8 More Weeks\"\r\n    )\r\n\r\ndefine \"PVC13 After Age 60 And Then PVC23 After 12 More Months\":\r\n  exists ( \"Pneumococcal Vaccine 13 After Age 60\" V13\r\n      with \"Pneumococcal Vaccine 23 After Age 60\" V23\r\n        such that months between V13.\"date\".value and V23.\"date\".value &gt;= 12\r\n  )\r\n\r\ndefine \"Pneumococcal Vaccine 13 After Age 60\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 13\"] V13\r\n    where V13.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V13.\"date\".value)&gt;= 60\r\n\r\ndefine \"Pneumococcal Vaccine 23 After Age 60\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 23\"] V23\r\n    where V23.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V23.\"date\".value)&gt;= 60\r\n\r\ndefine \"PVC13 After Age 2 And Then PVC23 After 8 More Weeks\":\r\n  \"Immunocompromised Diagnoses or Cochlear Implants\"\r\n    and exists ( \"Pneumococcal Vaccine 13 After Age 2\" V13\r\n        with \"Pneumococcal Vaccine 23 After Age 2\" V23\r\n          such that weeks between V13.\"date\".value and V23.\"date\".value &gt;= 8\r\n    )\r\n\r\ndefine \"Pneumococcal Vaccine 13 After Age 2\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 13\"] V13\r\n    where V13.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V13.\"date\".value)&gt;= 2\r\n\r\ndefine \"Pneumococcal Vaccine 23 After Age 2\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 23\"] V23\r\n    where V23.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V23.\"date\".value)&gt;= 2\r\n\r\ndefine \"Immunocompromised Diagnoses or Cochlear Implants\":\r\n  exists ( \"Immunocompromised Diagnoses Overlapping Measurement Period\" )\r\n    or exists ( \"Cochlear Implants on or Before End of Measurement Period\" )\r\n\r\ndefine \"Immunocompromised Diagnoses Overlapping Measurement Period\":\r\n  distinct ( [DiagnosticReport: \"Cerebrospinal Fluid Leaks\"]\r\n    union [DiagnosticReport: \"Functional or Aplastic Anemia\"]\r\n    union [DiagnosticReport: \"Disorders of the Immune System\"] ) D\r\n    where D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n      and PeriodToIntervalOfDT(D.effective)overlaps day of \"Measurement Period\"\r\n\r\ndefine \"Cochlear Implants on or Before End of Measurement Period\":\r\n  [Procedure: \"Cochlear Implants\"] CochlearImplant\r\n    where CochlearImplant.status.value in { 'in-progress', 'completed' }\r\n      and start of PeriodToIntervalOfDT(CochlearImplant.performed)same day or before \r\n      end of \"Measurement Period\"\n\n/*\nStratifiers\n*/\r\n\r\ndefine \"Stratifier 1\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[65, 74]\r\n\r\ndefine \"Stratifier 2\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[75, 84]\r\n\r\ndefine \"Stratifier 3\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 85\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
  },
  "version": "1.0.0",
  "name": "PVS_FHIR",
  "title": "PVS Logic",
  "status": "active",
  "experimental": true,
  "type": {
      "coding": [
          {
              "code": "logic-library"
          }
      ]
  },
  "date": "2017-05-05",
  "publisher": "National Committee for Quality Assurance",
  "description": "Pneumococcal Vaccination Status for Older Adults (PVS) Logic Library",
  "copyright": "The HEDIS measure specifications were developed by and are owned by NCQA. The HEDIS measure specifications are not clinical guidelines and do not establish a standard of medical care. NCQA makes no representations, warranties, or endorsement about the quality of any organization or physician that uses or reports performance measures and NCQA has no liability to anyone who relies on such measure specifications. These materials may not be modified by anyone other than NCQA. Anyone desiring to use or reproduce the materials without modification for a non-commercial purpose may do so without obtaining any approval from NCQA. **Any commercial use (including but not limited to vendors using the measure specifications with a product or service, including calculation of measure results) must be approved by NCQA and are subject to a license at the discretion of NCQA**.  &copy; 2019 NCQA, all rights reserved.",
  "dataRequirement": [
    {
      "type": "Procedure",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1326"
        }
      ]
    },
    {
      "type": "Procedure",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1325"
        }
      ]
    },
    {
      "type": "DiagnosticReport",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1024"
        }
      ]
    },
    {
      "type": "Immunization",
      "codeFilter": [
        {
          "path": "vaccineCode",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1439"
        }
      ]
    },
    {
      "type": "Immunization",
      "codeFilter": [
        {
          "path": "vaccineCode",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1440"
        }
      ]
    },
    {
      "type": "DiagnosticReport",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1448"
        }
      ]
    },
    {
      "type": "DiagnosticReport",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1449"
        }
      ]
    },
    {
      "type": "DiagnosticReport",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1139"
        }
      ]
    },
    {
      "type": "Procedure",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1447"
        }
      ]
    },
    {
      "type": "Immunization",
      "codeFilter": [
        {
          "path": "vaccineCode",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1439"
        }
      ]
    },
    {
      "type": "Immunization",
      "codeFilter": [
        {
          "path": "vaccineCode",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1440"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}