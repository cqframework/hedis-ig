{
  "resourceType": "Library",
  "id": "library-cbp-logic",
  "text": {
      "status": "generated",
      "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-cbp-logic/_history/2</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>Library_CBP</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Population criteria logic for the Controlling Blood Pressure Measure</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Topic: </b></th><td style=\"padding-right: 25px;\"><span style=\"padding-left: 25px;\"><b>text: </b><span>Controlling Blood Pressure</span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"13\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1203</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1122</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1077</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1202</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1191</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1086</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1189</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1189</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationDispense</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medicationCodeableConcept</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>DiabetesMedicationsList</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1105</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library CBP version '2'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0'\n\n/*\n\nDescription:\nThe percentage of members 1885 years of age who had a diagnosis of hypertension (HTN)\n  and whose BP was adequately controlled during the measurement year\n  based on the following criteria:\n    - Members 1859 years of age whose BP was &lt;140/90 mm Hg.\n    - Members 6085 years of age with a diagnosis of diabetes whose BP was &lt;140/90 mm Hg.\n    - Members 6085 years of age without a diagnosis of diabetes whose BP was &lt;150/90 mm Hg.\nNote: Use the Hybrid Method for this measure. A single rate is reported and is the sum of all three groups.\n\n*/\n\n/*\n// These are valuesets containing CPT codes indicating these concepts\nvalueset \"Systolic Less Than 140\": '2.16.840.1.113883.3.464.1004.1243'\nvalueset \"Systolic Greater Than/Equal To 140\": '2.16.840.1.113883.3.464.1004.1242'\nvalueset \"Diastolic Less Than 80\": '2.16.840.1.113883.3.464.1004.1084'\nvalueset \"Diastolic 80-89\": '2.16.840.1.113883.3.464.1004.1082'\nvalueset \"Diastolic Greater Than/Equal To 90\": '2.16.840.1.113883.3.464.1004.1083'\n*/\r\n\r\ncodesystem \"LOINC\": 'http://loinc.org'\r\n\r\nvalueset \"Acute Inpatient\": '2.16.840.1.113883.3.464.1004.1017'\r\nvalueset \"Diabetes\": '2.16.840.1.113883.3.464.1004.1077'\r\nvalueset \"Diabetes Exclusions\": '2.16.840.1.113883.3.464.1004.1105'\r\nvalueset \"ED\": '2.16.840.1.113883.3.464.1004.1086'\r\nvalueset \"ESRD\": '2.16.840.1.113883.3.464.1004.1089'\r\nvalueset \"ESRD Obsolete\": '2.16.840.1.113883.3.464.1004.1090'\r\nvalueset \"Essential Hypertension\": '2.16.840.1.113883.3.464.1004.1122'\r\nvalueset \"Inpatient Stay\": '2.16.840.1.113883.3.464.1004.1395'\r\nvalueset \"Kidney Transplant\": '2.16.840.1.113883.3.464.1004.1141'\r\nvalueset \"Nonacute Inpatient\": '2.16.840.1.113883.3.464.1004.1189'\r\nvalueset \"Nonacute Inpatient Stay\": '2.16.840.1.113883.3.464.1004.1398'\r\nvalueset \"Observation\": '2.16.840.1.113883.3.464.1004.1191'\r\nvalueset \"Outpatient\": '2.16.840.1.113883.3.464.1004.1202'\r\nvalueset \"Outpatient Without UBREV\": '2.16.840.1.113883.3.464.1004.1203'\r\nvalueset \"Pregnancy\": '2.16.840.1.113883.3.464.1004.1219'\r\nvalueset \"Diabetes Medications List\": 'DiabetesMedicationsList' // NDC Codes\r\n\r\ncode \"Blood Pressure\": '55284-4' from \"LOINC\" display 'Blood pressure'\r\ncode \"Systolic Blood Pressure\": '8480-6' from \"LOINC\" display 'Systolic blood pressure'\r\ncode \"Diastolic Blood Pressure\": '8462-4' from \"LOINC\" display 'Diastolic blood pressure'\r\n\r\nparameter \"Measurement Period\" default Interval[@2018-01-01, @2019-01-01 )\r\n\r\ncontext Patient\r\n\r\ndefine \"First 6 Months of Measurement Period\":\r\n  Interval[start of \"Measurement Period\", DateTime(year from start of \"Measurement Period\", 6, 30)]\r\n\r\ndefine \"Initial Population\":\r\n  \"In Demographic\"\r\n    and \"Event Diagnosis\"\n\n/*\n    TODO: Members in hospice are excluded from the eligible population.\n      If a member is found to be in hospice or using hospice services during medical record review,\n      the member is removed from the sample and replaced by a member from the oversample.\n      Refer to General Guideline 20: Members in Hospice.\n*/\n\n// TODO: Product lines - Commercial, Medicaid, Medicare (report each product line separately).\n// TODO: Continuous enrollment - The measurement year.\n\n/*\n    TODO: Allowable gap\tNo more than one gap in continuous enrollment of up to 45 days during the measurement year.\n      To determine continuous enrollment for a Medicaid beneficiary for whom enrollment is verified monthly,\n      the member may not have more than a 1-month gap in coverage (i.e., a member whose coverage lapses for\n      2 months [60 days] is not considered continuously enrolled).\n*/\n\n/*\n    TODO: Required exclusion\tExclude Medicare members age 65 and older as of January 1 of the measurement year who are:\n      Enrolled in an Institutional SNP (I-SNP) any time during the measurement year.\n      Living long-term in an institution any time during the measurement year.\n      Organizations may use the LTI flag in the Medicare Part C monthly membership file.\n*/\n\n// Ages\t1885 years as of December 31 of the measurement year.\r\n\r\ndefine \"In Demographic\":\r\n  AgeInYearsAt(DateTime(year from start of \"Measurement Period\", 12, 31))in Interval[18, 85]\n\n/*\n    Members are identified as hypertensive if there is at least one outpatient visit (Outpatient Without UBREV Value Set)\n    with a diagnosis of hypertension (Essential Hypertension Value Set) during the first six months of the measurement year.\n*/\r\n\r\ndefine \"Outpatient Encounters Without UBREV\":\r\n  [Encounter: \"Outpatient Without UBREV\"] Encounters\r\n    where Encounters.status = 'finished'\r\n      and Encounters.period.\"start\" in day of \"First 6 Months of Measurement Period\"\r\n\r\ndefine \"Hypertension Diagnosis\":\r\n  [Condition: \"Essential Hypertension\"] HTDiagnosis\r\n    where HTDiagnosis.clinicalStatus = 'active'\r\n      and HTDiagnosis.verificationStatus = 'confirmed'\r\n      and HTDiagnosis.assertedDate in day of \"First 6 Months of Measurement Period\"\r\n    sort by assertedDate desc\r\n\r\ndefine \"Event Diagnosis\":\r\n  AnyTrue({ \"Event Diagnosis Context Match\", \"Event Diagnosis Date Match\" })\n\n// one way - match context reference to Encounter id\r\n\r\ndefine \"Event Diagnosis Context Match\":\r\n  exists ( \"Outpatient Encounters Without UBREV\" Encounters\r\n      with \"Hypertension Diagnosis\" HTDiagnosis\r\n        such that EndsWith(HTDiagnosis.\"context\".reference, Encounters.id)\r\n  )\n\n// another way - if they occur on the same day\r\n\r\ndefine \"Event Diagnosis Date Match\":\r\n  exists ( \"Outpatient Encounters Without UBREV\" Encounters\r\n      with \"Hypertension Diagnosis\" HTDiagnosis\r\n        such that HTDiagnosis.assertedDate in day of Encounters.period\r\n  )\n\n/*\n    After the Eligible Population is identified, assign each member either a diabetic\n    or not diabetic flag using only administrative data and the steps below. The flag\n    is used to determine the appropriate BP threshold to use during numerator assessment\n    (the threshold for members with diabetes is different than the threshold for members without diabetes).\n*/\n\n/*\n    Step 1:\n      Assign a flag of diabetic to members identified as diabetic using *** claim/encounter data *** or\n      *** pharmacy data ***. The organization must use both methods to assign the diabetes flag, but a\n      member only needs to be identified by one method. Members may be identified as having diabetes during\n      the measurement year or the year prior to the measurement year.\n*/\r\n\r\ndefine \"Lookback Period Year Prior to End of Measurement Period\":\r\n  Interval[start of \"Measurement Period\" - 1 year, \r\n  end of \"Measurement Period\"]\r\n\r\ndefine \"Step 1 Is Diabetic Flag\":\r\n  \"Is Diabetic Using Claim and Encounter Data?\"\r\n    or \"Is Diabetic Using Pharmacy Data\"\n\n/*\n    Claim/encounter data. Members who met any of the following criteria during the measurement year\n    or the year prior to the measurement year (count services that occur over both years):\n      - At least two outpatient visits (Outpatient Value Set), observation visits (Observation Value Set),\n        ED visits (ED Value Set) or nonacute inpatient encounters (Nonacute Inpatient Value Set) on different\n        dates of service, with a diagnosis of diabetes (Diabetes Value Set). Visit type need not be the same\n        for the two visits.\n      - At least one acute inpatient encounter (Acute Inpatient Value Set) with a diagnosis of diabetes (Diabetes Value Set).\n*/\n\n/*\n    TODO - determine best method to use for Claim data\n      Current best guess:\n      Claim during \"Lookback Period Year Prior to End of Measurement Period\" with Diabetes diagnosis (see \"Get Concept from Claim Diagnosis\" function)\n        AND (\n          At least two outpatient visits,\n            observation visits,\n            ED visits\n            or nonacute inpatient encounters\n              on different dates of service\n          OR At least one acute inpatient encounter\n        )\n*/\r\n\r\ndefine \"Is Diabetic Using Claim and Encounter Data?\":\r\n  if exists ( \"Diabetes Condition\" ) then ( \"Count Encounters with Diabetes Diagnosis on Different Dates of Service\" &gt;= 2\r\n      or \"Count Acute Encounters with Diabetes Diagnosis\" &gt;= 1\r\n  ) \r\n    else false\n\n// TODO - Hmmm... need to verify that this method is valid\r\n\r\ndefine \"Diabetes Condition\":\r\n  [Condition: code in \"Diabetes\"] DiabetesCondition\r\n    where DiabetesCondition.clinicalStatus = 'active'\r\n      and DiabetesCondition.verificationStatus = 'confirmed'\r\n      and exists ( DiabetesCondition.category CategoryConcepts\r\n          where exists ( CategoryConcepts.coding ConceptCodes\r\n              where ConceptCodes.code = 'encounter-diagnosis'\r\n          )\r\n      )\r\n      and DiabetesCondition.assertedDate in day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n\r\ndefine \"Count Encounters with Diabetes Diagnosis on Different Dates of Service\":\r\n  Count(\"Encounters with Diabetes Diagnosis\" DiabetesDiagnosisEncounters\r\n      return distinct(DiabetesDiagnosisEncounters.period)\r\n  )\r\n\r\ndefine \"Count Acute Encounters with Diabetes Diagnosis\":\r\n  Count(\"Acute Encounters with Diabetes Diagnosis\" DiabetesDiagnosisEncounters)\r\n\r\ndefine \"Encounters with Diabetes Diagnosis\":\r\n  ( \"Outpatient Encounters\"\r\n    union \"Observation Encounters\"\r\n    union \"ED Encounters\"\r\n    union \"Nonacute Inpatient Encounters\" ) Encounters\r\n    with \"Diabetes Condition\" DiabetesCondition\r\n      such that EndsWith(Encounters.diagnosis.condition.reference, DiabetesCondition.id)\r\n        or EndsWith(DiabetesCondition.\"context\".reference, Encounters.id)\r\n    return Encounters\r\n\r\ndefine \"Acute Encounters with Diabetes Diagnosis\":\r\n  \"Acute Inpatient Encounters\" Encounters\r\n    with \"Diabetes Condition\" DiabetesCondition\r\n      such that EndsWith(Encounters.diagnosis.condition.reference, DiabetesCondition.id)\r\n        or EndsWith(DiabetesCondition.\"context\".reference, Encounters.id)\r\n    return Encounters\r\n\r\ndefine \"Outpatient Encounters\":\r\n  [Encounter: type in \"Outpatient\"] OutpatientEncounters\r\n    where OutpatientEncounters.status = 'finished'\r\n      and OutpatientEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"Observation Encounters\":\r\n  [Encounter: type in \"Observation\"] ObservationEncounters\r\n    where ObservationEncounters.status = 'finished'\r\n      and ObservationEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"ED Encounters\":\r\n  [Encounter: type in \"ED\"] EDEncounters\r\n    where EDEncounters.status = 'finished'\r\n      and EDEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"Nonacute Inpatient Encounters\":\r\n  [Encounter: type in \"Nonacute Inpatient\"] NonacuteEncounters\r\n    where NonacuteEncounters.status = 'finished'\r\n      and NonacuteEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"Acute Inpatient Encounters\":\r\n  [Encounter: type in \"Nonacute Inpatient\"] AcuteEncounters\r\n    where AcuteEncounters.status = 'finished'\r\n      and AcuteEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\n\n/*\n    Pharmacy data. Members who were dispensed insulin or hypoglycemics/ antihyperglycemics\n      on an ambulatory basis during the measurement year or the year prior to the\n      measurement year (Diabetes Medications List).\n*/\r\n\r\ndefine \"Is Diabetic Using Pharmacy Data\":\r\n  exists ( \"Members Dispensed Diabetes Medications During Step 1 Period\" )\r\n\r\ndefine \"Members Dispensed Diabetes Medications During Step 1 Period\":\r\n  [MedicationDispense: medicationCodeableConcept in \"Diabetes Medications List\"] DiabetesMedicationDispense\r\n    where DiabetesMedicationDispense.status = 'completed'\r\n      and DiabetesMedicationDispense.whenHandedOver in day of \"Lookback Period Year Prior to End of Measurement Period\"\n\n\n/*\n    Step 2:\n      From the members identified in step 1, assign a flag of not diabetic to members who\n        do not have a diagnosis of diabetes (Diabetes Value Set), in any setting, during the\n        measurement year or year prior to the measurement year and who had a diagnosis of\n        gestational diabetes or steroid-induced diabetes (Diabetes Exclusions Value Set),\n        in any setting, during the measurement year or the year prior to the measurement year.\n      Note: Members classified as diabetic in step 1 based on pharmacy data alone and who had\n        a diagnosis of gestational or steroid-induced diabetes as specified above are reclassified\n        as not diabetic in this step.\n*/\r\n\r\ndefine \"Step 2 Is Diabetic Flag\":\r\n  not ( ( not \"Diabetes Diagnosis in Any Setting\"\r\n        or ( \"Is Diabetic Using Pharmacy Data\"\r\n            and not exists ( \"Encounters with Diabetes Diagnosis\" )\r\n        )\r\n    )\r\n      and exists ( \"Has Diagnosis of Gestational or Steroid-Induced Diabetes\" )\r\n  )\r\n\r\ndefine \"Diabetes Diagnosis in Any Setting\":\r\n  exists ( [Encounter] Encounters\r\n      with \"Diabetes Condition\" DiabetesCondition\r\n        such that EndsWith(Encounters.diagnosis.condition.reference, DiabetesCondition.id)\r\n          or EndsWith(DiabetesCondition.\"context\".reference, Encounters.id)\r\n      return Encounters\r\n  )\r\n\r\ndefine \"Has Diagnosis of Gestational or Steroid-Induced Diabetes\":\r\n  [Condition: code in \"Diabetes Exclusions\"] InducedDiabetesCondition\r\n    where InducedDiabetesCondition.clinicalStatus = 'active'\r\n      and InducedDiabetesCondition.verificationStatus = 'confirmed'\r\n      and InducedDiabetesCondition.assertedDate in day of \"Lookback Period Year Prior to End of Measurement Period\"\n\n/*\n    Step 3:\n      Assign a flag of not diabetic to members who were not assigned a flag in step 1 or step 2.\n*/\r\n\r\ndefine \"Step 3 Is Diabetic Flag\":\r\n  if ( \"Step 1 Is Diabetic Flag\" is null\r\n      and \"Step 2 Is Diabetic Flag\" is null\r\n  ) then false \r\n    else \"Step 1 Is Diabetic Flag\"\r\n    or \"Step 2 Is Diabetic Flag\"\n\n/*\n    Denominator:\n      To confirm the diagnosis of hypertension, the organization must find notation of one of\n        the following in the medical record anytime during the members history on or before\n        June 30 of the measurement year:\n          - Hypertension\n          - HTN\n          - High BP (HBP)\n          - Elevated BP (\ufffdBP)\n          - Borderline HTN\n          - Intermittent HTN\n          - History of HTN\n          - Hypertensive vascular disease (HVD)\n          - Hyperpiesia\n          - Hyperpiesis\n          - A diagnosis code for hypertension documented in the medical record\n      It does not matter if hypertension was treated or is currently being treated.\n        The notation indicating a diagnosis of hypertension may be recorded in any\n        of the following documents:\n          - Problem list (this may include a diagnosis prior to June 30 of the measurement year\n              or an undated diagnosis that is not part of the office visit note; see the Note at\n              the end of this section)\n          - Office note\n          - Subjective, Objective, Assessment, Plan (SOAP) note\n          - Encounter form\n          - Diagnostic report\n          - Hospital discharge summary\n\n      * If the diagnosis of hypertension cannot be confirmed, the member is excluded and replaced\n        by the next member from the oversample.\n*/\r\n\r\ndefine \"Denominator\":\r\n  true\n\n/*\n    Use one medical record for both the confirmation of the diagnosis of hypertension and the\n      representative BP. All eligible BP measurements recorded in the record must be considered.\n      NOTE - If an organization cannot find the medical record, the member remains in the measure\n      denominator and is considered noncompliant for the numerator.\n*/\n\n/*\n    Step 1:\n      Identify the members PCP\n        If the member had more than one PCP for the time period, identify the PCP who most recently\n        provided care to the member\n*/\r\n\r\ndefine \"Member's PCP\":\r\n  if ( Length(\"Patient General Practitioners\")= 1 ) then \"Patient General Practitioners\"[0].reference \r\n    else \"Get PCP Who Most Recently Provided Care\".reference\r\n\r\ndefine \"Patient General Practitioners\":\r\n  Patient.generalPractitioner practitioners\r\n    where practitioners.reference is not null\n\n// NOTE - using Encounters to determine PCP who most recently provided care\r\n\r\ndefine \"Get PCP Who Most Recently Provided Care\":\r\n  ( [Encounter] Encounters\r\n    where Encounters.participant is not null\r\n      and Encounters.status = 'finished'\r\n      and Encounters.period during day of \"Measurement Period\"\r\n    sort by period.\"start\" desc ) MostRecentEncounters\r\n    return First(MostRecentEncounters.participant participants\r\n        where participants.individual is not null\r\n          and participants.individual.reference is not null\r\n        return participants.individual\r\n    )\n\n/*\n    Step 2:\n      Use one medical record to both confirm the diagnosis for the denominator and identify the\n        representative BP level for the numerator.\n      TODO - account for cirumstances when 2 records are needed to either confirm the diagnosis or obtain the BP reading\n*/\n\n// TODO\n\n/*\n    Numerator:\n    The number of members in the denominator whose most recent BP (both systolic and diastolic) is adequately\n      controlled during the measurement year based on the following criteria:\n        - Members 1859 years of age as of December 31 of the measurement year whose BP was &lt;140/90 mm Hg.\n        - Members 6085 years of age as of December 31 of the measurement year who were flagged with a\n          diagnosis of diabetes and whose BP was &lt;140/90 mm Hg.\n        - Members 6085 years of age as of December 31 of the measurement year who were flagged as not having\n          a diagnosis of diabetes and whose BP was &lt;150/90 mm Hg.\n      To determine if the members BP is adequately controlled, the representative BP must be identified.\n*/\n\n/*\n    Step 1:\n    Identify the most recent BP reading noted during the measurement year. The reading must occur after the\n      date when the diagnosis of hypertension was confirmed.\n    Do not include BP readings: TODO\n      - Taken during an acute inpatient stay or an ED visit.\n      - Taken on the same day as a diagnostic test or diagnostic or therapeutic procedure that requires a\n        change in diet or change in medication on or one day before the day of the test or procedure, with\n        the exception of fasting blood tests.\n      - Reported by or taken by the member.\n    If multiple readings were recorded for a single date, use the lowest systolic and lowest diastolic BP\n      on that date as the representative BP. The systolic and diastolic results do not need to be from\n      the same reading. TODO\n*/\r\n\r\ndefine \"Most Recent BP Readings\":\r\n  [Observation: \"Blood Pressure\"] BPObservation\r\n    where BPObservation.effective in day of \"Measurement Period\"\r\n      and ( BPObservation.effective as dateTime ) after day of First(\"Hypertension Diagnosis\").assertedDate\r\n    sort by effective desc\n\n/*\n    Step 2:\n      Determine numerator compliance using the criteria in the Numerator secition above.\n      The member is not compliant if the BP reading does not meet the specified threshold or is missing,\n        if there is no BP reading during the measurement year or if the reading is incomplete\n        (e.g., the systolic or diastolic level is missing).\n*/\n\n/*\n    NOTE\n    I can imagine a couple of different ways an Observation could represent blood pressure values:\n      - Observation with a valueRatio (Systolic/Diastolic)\n      - Observation with component values for Systolic and Diastolic\n*/\n\n\n\n/*\n\n    Helper functions\n\n*/\r\n\r\ndefine function \"Get Concept from Claim Diagnosis\"(value Choice&lt;FHIR.CodeableConcept, FHIR.Reference&gt;):\r\n  if value is FHIR.CodeableConcept then value \r\n    else ( \"Diabetes Condition\" DC\r\n      where EndsWith(value.reference, DC.id)\r\n      return DC.code\r\n  )\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
  },
  "identifier": [
      {
          "use": "official",
          "value": "Library_CBP"
      }
  ],
  "version": "1.0.0",
  "name": "CBP_FHIR",
  "title": "Population criteria logic for the Controlling Blood Pressure Measure",
  "status": "active",
  "experimental": true,
  "type": {
      "coding": [
          {
              "code": "logic-library"
          }
      ]
  },
  "date": "2017-05-05",
  "publisher": "National Committee for Quality Assurance",
  "topic": [
      {
          "text": "Controlling Blood Pressure"
      }
  ],
  "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-fhir-helpers"
      }
    }
  ],
  "dataRequirement": [
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1203"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1122"
        }
      ]
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1077"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1202"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1191"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1086"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1189"
        }
      ]
    },
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1189"
        }
      ]
    },
    {
      "type": "MedicationDispense",
      "codeFilter": [
        {
          "path": "medicationCodeableConcept",
          "valueSetString": "DiabetesMedicationsList"
        }
      ]
    },
    {
      "type": "Encounter"
    },
    {
      "type": "Condition",
      "codeFilter": [
        {
          "path": "code",
          "valueSetString": "2.16.840.1.113883.3.464.1004.1105"
        }
      ]
    },
    {
      "type": "Encounter"
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": "bGlicmFyeSBDQlBfRkhJUiB2ZXJzaW9uICcyJw0KDQp1c2luZyBGSElSIHZlcnNpb24gJzMuMC4wJw0KDQppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzMuMC4wJyBjYWxsZWQgRkhJUkhlbHBlcnMNCg0KLyoNCg0KRGVzY3JpcHRpb246DQpUaGUgcGVyY2VudGFnZSBvZiBtZW1iZXJzIDE44oCTODUgeWVhcnMgb2YgYWdlIHdobyBoYWQgYSBkaWFnbm9zaXMgb2YgaHlwZXJ0ZW5zaW9uIChIVE4pDQogIGFuZCB3aG9zZSBCUCB3YXMgYWRlcXVhdGVseSBjb250cm9sbGVkIGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgeWVhcg0KICBiYXNlZCBvbiB0aGUgZm9sbG93aW5nIGNyaXRlcmlhOg0KICAgIC0gTWVtYmVycyAxOOKAkzU5IHllYXJzIG9mIGFnZSB3aG9zZSBCUCB3YXMgPDE0MC85MCBtbSBIZy4NCiAgICAtIE1lbWJlcnMgNjDigJM4NSB5ZWFycyBvZiBhZ2Ugd2l0aCBhIGRpYWdub3NpcyBvZiBkaWFiZXRlcyB3aG9zZSBCUCB3YXMgPDE0MC85MCBtbSBIZy4NCiAgICAtIE1lbWJlcnMgNjDigJM4NSB5ZWFycyBvZiBhZ2Ugd2l0aG91dCBhIGRpYWdub3NpcyBvZiBkaWFiZXRlcyB3aG9zZSBCUCB3YXMgPDE1MC85MCBtbSBIZy4NCk5vdGU6IFVzZSB0aGUgSHlicmlkIE1ldGhvZCBmb3IgdGhpcyBtZWFzdXJlLiBBIHNpbmdsZSByYXRlIGlzIHJlcG9ydGVkIGFuZCBpcyB0aGUgc3VtIG9mIGFsbCB0aHJlZSBncm91cHMuDQoNCiovDQoNCi8qDQovLyBUaGVzZSBhcmUgdmFsdWVzZXRzIGNvbnRhaW5pbmcgQ1BUIGNvZGVzIGluZGljYXRpbmcgdGhlc2UgY29uY2VwdHMNCnZhbHVlc2V0ICJTeXN0b2xpYyBMZXNzIFRoYW4gMTQwIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTI0MycNCnZhbHVlc2V0ICJTeXN0b2xpYyBHcmVhdGVyIFRoYW4vRXF1YWwgVG8gMTQwIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTI0MicNCnZhbHVlc2V0ICJEaWFzdG9saWMgTGVzcyBUaGFuIDgwIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTA4NCcNCnZhbHVlc2V0ICJEaWFzdG9saWMgODAtODkiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMDgyJw0KdmFsdWVzZXQgIkRpYXN0b2xpYyBHcmVhdGVyIFRoYW4vRXF1YWwgVG8gOTAiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMDgzJw0KKi8NCg0KY29kZXN5c3RlbSAiTE9JTkMiOiAnaHR0cDovL2xvaW5jLm9yZycNCg0KdmFsdWVzZXQgIkFjdXRlIElucGF0aWVudCI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEwMTcnDQp2YWx1ZXNldCAiRGlhYmV0ZXMiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMDc3Jw0KdmFsdWVzZXQgIkRpYWJldGVzIEV4Y2x1c2lvbnMiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMTA1Jw0KdmFsdWVzZXQgIkVEIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTA4NicNCnZhbHVlc2V0ICJFU1JEIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTA4OScNCnZhbHVlc2V0ICJFU1JEIE9ic29sZXRlIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTA5MCcNCnZhbHVlc2V0ICJFc3NlbnRpYWwgSHlwZXJ0ZW5zaW9uIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTEyMicNCnZhbHVlc2V0ICJJbnBhdGllbnQgU3RheSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzOTUnDQp2YWx1ZXNldCAiS2lkbmV5IFRyYW5zcGxhbnQiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMTQxJw0KdmFsdWVzZXQgIk5vbmFjdXRlIElucGF0aWVudCI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjExODknDQp2YWx1ZXNldCAiTm9uYWN1dGUgSW5wYXRpZW50IFN0YXkiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMzk4Jw0KdmFsdWVzZXQgIk9ic2VydmF0aW9uIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTE5MScNCnZhbHVlc2V0ICJPdXRwYXRpZW50IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTIwMicNCnZhbHVlc2V0ICJPdXRwYXRpZW50IFdpdGhvdXQgVUJSRVYiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMjAzJw0KdmFsdWVzZXQgIlByZWduYW5jeSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEyMTknDQoNCnZhbHVlc2V0ICJEaWFiZXRlcyBNZWRpY2F0aW9ucyBMaXN0IjogJ0RpYWJldGVzTWVkaWNhdGlvbnNMaXN0JyAvLyBOREMgQ29kZXMNCg0KY29kZSAiQmxvb2QgUHJlc3N1cmUiOiAnNTUyODQtNCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ0Jsb29kIHByZXNzdXJlJw0KY29kZSAiU3lzdG9saWMgQmxvb2QgUHJlc3N1cmUiOiAnODQ4MC02JyBmcm9tICJMT0lOQyIgZGlzcGxheSAnU3lzdG9saWMgYmxvb2QgcHJlc3N1cmUnDQpjb2RlICJEaWFzdG9saWMgQmxvb2QgUHJlc3N1cmUiOiAnODQ2Mi00JyBmcm9tICJMT0lOQyIgZGlzcGxheSAnRGlhc3RvbGljIGJsb29kIHByZXNzdXJlJw0KDQpwYXJhbWV0ZXIgIk1lYXN1cmVtZW50IFBlcmlvZCIgZGVmYXVsdCBJbnRlcnZhbFtAMjAxOC0wMS0wMSwgQDIwMTktMDEtMDEpDQoNCmNvbnRleHQgUGF0aWVudA0KDQpkZWZpbmUgIkZpcnN0IDYgTW9udGhzIG9mIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogIEludGVydmFsW3N0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiLCBEYXRlVGltZSh5ZWFyIGZyb20gc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIsIDYsIDMwKV0NCg0KZGVmaW5lICJJbml0aWFsIFBvcHVsYXRpb24iOg0KICAiSW4gRGVtb2dyYXBoaWMiIGFuZCAiRXZlbnQgRGlhZ25vc2lzIg0KDQovKg0KICAgIFRPRE86IE1lbWJlcnMgaW4gaG9zcGljZSBhcmUgZXhjbHVkZWQgZnJvbSB0aGUgZWxpZ2libGUgcG9wdWxhdGlvbi4NCiAgICAgIElmIGEgbWVtYmVyIGlzIGZvdW5kIHRvIGJlIGluIGhvc3BpY2Ugb3IgdXNpbmcgaG9zcGljZSBzZXJ2aWNlcyBkdXJpbmcgbWVkaWNhbCByZWNvcmQgcmV2aWV3LA0KICAgICAgdGhlIG1lbWJlciBpcyByZW1vdmVkIGZyb20gdGhlIHNhbXBsZSBhbmQgcmVwbGFjZWQgYnkgYSBtZW1iZXIgZnJvbSB0aGUgb3ZlcnNhbXBsZS4NCiAgICAgIFJlZmVyIHRvIEdlbmVyYWwgR3VpZGVsaW5lIDIwOiBNZW1iZXJzIGluIEhvc3BpY2UuDQoqLw0KDQovLyBUT0RPOiBQcm9kdWN0IGxpbmVzIC0gQ29tbWVyY2lhbCwgTWVkaWNhaWQsIE1lZGljYXJlIChyZXBvcnQgZWFjaCBwcm9kdWN0IGxpbmUgc2VwYXJhdGVseSkuDQovLyBUT0RPOiBDb250aW51b3VzIGVucm9sbG1lbnQgLSBUaGUgbWVhc3VyZW1lbnQgeWVhci4NCg0KLyoNCiAgICBUT0RPOiBBbGxvd2FibGUgZ2FwCU5vIG1vcmUgdGhhbiBvbmUgZ2FwIGluIGNvbnRpbnVvdXMgZW5yb2xsbWVudCBvZiB1cCB0byA0NSBkYXlzIGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgeWVhci4NCiAgICAgIFRvIGRldGVybWluZSBjb250aW51b3VzIGVucm9sbG1lbnQgZm9yIGEgTWVkaWNhaWQgYmVuZWZpY2lhcnkgZm9yIHdob20gZW5yb2xsbWVudCBpcyB2ZXJpZmllZCBtb250aGx5LA0KICAgICAgdGhlIG1lbWJlciBtYXkgbm90IGhhdmUgbW9yZSB0aGFuIGEgMS1tb250aCBnYXAgaW4gY292ZXJhZ2UgKGkuZS4sIGEgbWVtYmVyIHdob3NlIGNvdmVyYWdlIGxhcHNlcyBmb3INCiAgICAgIDIgbW9udGhzIFs2MCBkYXlzXSBpcyBub3QgY29uc2lkZXJlZCBjb250aW51b3VzbHkgZW5yb2xsZWQpLg0KKi8NCg0KLyoNCiAgICBUT0RPOiBSZXF1aXJlZCBleGNsdXNpb24JRXhjbHVkZSBNZWRpY2FyZSBtZW1iZXJzIGFnZSA2NSBhbmQgb2xkZXIgYXMgb2YgSmFudWFyeSAxIG9mIHRoZSBtZWFzdXJlbWVudCB5ZWFyIHdobyBhcmU6DQogICAgICBFbnJvbGxlZCBpbiBhbiBJbnN0aXR1dGlvbmFsIFNOUCAoSS1TTlApIGFueSB0aW1lIGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgeWVhci4NCiAgICAgIExpdmluZyBsb25nLXRlcm0gaW4gYW4gaW5zdGl0dXRpb24gYW55IHRpbWUgZHVyaW5nIHRoZSBtZWFzdXJlbWVudCB5ZWFyLg0KICAgICAgT3JnYW5pemF0aW9ucyBtYXkgdXNlIHRoZSBMVEkgZmxhZyBpbiB0aGUgTWVkaWNhcmUgUGFydCBDIG1vbnRobHkgbWVtYmVyc2hpcCBmaWxlLg0KKi8NCg0KLy8gQWdlcwkxOOKAkzg1IHllYXJzIGFzIG9mIERlY2VtYmVyIDMxIG9mIHRoZSBtZWFzdXJlbWVudCB5ZWFyLg0KZGVmaW5lICJJbiBEZW1vZ3JhcGhpYyI6DQogIEFnZUluWWVhcnNBdChEYXRlVGltZSh5ZWFyIGZyb20gc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIsIDEyLCAzMSkpIGluIEludGVydmFsWzE4LCA4NV0NCg0KLyoNCiAgICBNZW1iZXJzIGFyZSBpZGVudGlmaWVkIGFzIGh5cGVydGVuc2l2ZSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgb3V0cGF0aWVudCB2aXNpdCAoT3V0cGF0aWVudCBXaXRob3V0IFVCUkVWIFZhbHVlIFNldCkNCiAgICB3aXRoIGEgZGlhZ25vc2lzIG9mIGh5cGVydGVuc2lvbiAoRXNzZW50aWFsIEh5cGVydGVuc2lvbiBWYWx1ZSBTZXQpIGR1cmluZyB0aGUgZmlyc3Qgc2l4IG1vbnRocyBvZiB0aGUgbWVhc3VyZW1lbnQgeWVhci4NCiovDQpkZWZpbmUgIk91dHBhdGllbnQgRW5jb3VudGVycyBXaXRob3V0IFVCUkVWIjoNCiAgW0VuY291bnRlcjogIk91dHBhdGllbnQgV2l0aG91dCBVQlJFViJdIEVuY291bnRlcnMNCiAgICB3aGVyZSBFbmNvdW50ZXJzLnN0YXR1cyA9ICdmaW5pc2hlZCcNCiAgICAgIGFuZCBFbmNvdW50ZXJzLnBlcmlvZC4ic3RhcnQiIGluIGRheSBvZiAiRmlyc3QgNiBNb250aHMgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQpkZWZpbmUgIkh5cGVydGVuc2lvbiBEaWFnbm9zaXMiOg0KICBbQ29uZGl0aW9uOiAiRXNzZW50aWFsIEh5cGVydGVuc2lvbiJdIEhURGlhZ25vc2lzDQogICAgd2hlcmUgSFREaWFnbm9zaXMuY2xpbmljYWxTdGF0dXMgPSAnYWN0aXZlJw0KICAgICAgYW5kIEhURGlhZ25vc2lzLnZlcmlmaWNhdGlvblN0YXR1cyA9ICdjb25maXJtZWQnDQogICAgICBhbmQgSFREaWFnbm9zaXMuYXNzZXJ0ZWREYXRlIGluIGRheSBvZiAiRmlyc3QgNiBNb250aHMgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgICBzb3J0IGJ5IGFzc2VydGVkRGF0ZSBkZXNjDQoNCmRlZmluZSAiRXZlbnQgRGlhZ25vc2lzIjoNCiAgQW55VHJ1ZSggeyAiRXZlbnQgRGlhZ25vc2lzIENvbnRleHQgTWF0Y2giLCAiRXZlbnQgRGlhZ25vc2lzIERhdGUgTWF0Y2giIH0gKQ0KDQovLyBvbmUgd2F5IC0gbWF0Y2ggY29udGV4dCByZWZlcmVuY2UgdG8gRW5jb3VudGVyIGlkDQpkZWZpbmUgIkV2ZW50IERpYWdub3NpcyBDb250ZXh0IE1hdGNoIjoNCiAgZXhpc3RzKA0KICAgICJPdXRwYXRpZW50IEVuY291bnRlcnMgV2l0aG91dCBVQlJFViIgRW5jb3VudGVycyB3aXRoICJIeXBlcnRlbnNpb24gRGlhZ25vc2lzIiBIVERpYWdub3Npcw0KICAgICAgc3VjaCB0aGF0IEVuZHNXaXRoKEhURGlhZ25vc2lzLiJjb250ZXh0Ii5yZWZlcmVuY2UsIEVuY291bnRlcnMuaWQpDQogICkNCg0KLy8gYW5vdGhlciB3YXkgLSBpZiB0aGV5IG9jY3VyIG9uIHRoZSBzYW1lIGRheQ0KZGVmaW5lICJFdmVudCBEaWFnbm9zaXMgRGF0ZSBNYXRjaCI6DQogIGV4aXN0cygNCiAgICAiT3V0cGF0aWVudCBFbmNvdW50ZXJzIFdpdGhvdXQgVUJSRVYiIEVuY291bnRlcnMgd2l0aCAiSHlwZXJ0ZW5zaW9uIERpYWdub3NpcyIgSFREaWFnbm9zaXMNCiAgICAgIHN1Y2ggdGhhdCBIVERpYWdub3Npcy5hc3NlcnRlZERhdGUgaW4gZGF5IG9mIEVuY291bnRlcnMucGVyaW9kDQogICkNCg0KLyoNCiAgICBBZnRlciB0aGUgRWxpZ2libGUgUG9wdWxhdGlvbiBpcyBpZGVudGlmaWVkLCBhc3NpZ24gZWFjaCBtZW1iZXIgZWl0aGVyIGEgZGlhYmV0aWMNCiAgICBvciBub3QgZGlhYmV0aWMgZmxhZyB1c2luZyBvbmx5IGFkbWluaXN0cmF0aXZlIGRhdGEgYW5kIHRoZSBzdGVwcyBiZWxvdy4gVGhlIGZsYWcNCiAgICBpcyB1c2VkIHRvIGRldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgQlAgdGhyZXNob2xkIHRvIHVzZSBkdXJpbmcgbnVtZXJhdG9yIGFzc2Vzc21lbnQNCiAgICAodGhlIHRocmVzaG9sZCBmb3IgbWVtYmVycyB3aXRoIGRpYWJldGVzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSB0aHJlc2hvbGQgZm9yIG1lbWJlcnMgd2l0aG91dCBkaWFiZXRlcykuDQoqLw0KDQovKg0KICAgIFN0ZXAgMToNCiAgICAgIEFzc2lnbiBhIGZsYWcgb2YgZGlhYmV0aWMgdG8gbWVtYmVycyBpZGVudGlmaWVkIGFzIGRpYWJldGljIHVzaW5nICoqKiBjbGFpbS9lbmNvdW50ZXIgZGF0YSAqKiogb3INCiAgICAgICoqKiBwaGFybWFjeSBkYXRhICoqKi4gVGhlIG9yZ2FuaXphdGlvbiBtdXN0IHVzZSBib3RoIG1ldGhvZHMgdG8gYXNzaWduIHRoZSBkaWFiZXRlcyBmbGFnLCBidXQgYQ0KICAgICAgbWVtYmVyIG9ubHkgbmVlZHMgdG8gYmUgaWRlbnRpZmllZCBieSBvbmUgbWV0aG9kLiBNZW1iZXJzIG1heSBiZSBpZGVudGlmaWVkIGFzIGhhdmluZyBkaWFiZXRlcyBkdXJpbmcNCiAgICAgIHRoZSBtZWFzdXJlbWVudCB5ZWFyIG9yIHRoZSB5ZWFyIHByaW9yIHRvIHRoZSBtZWFzdXJlbWVudCB5ZWFyLg0KKi8NCg0KZGVmaW5lICJMb29rYmFjayBQZXJpb2QgWWVhciBQcmlvciB0byBFbmQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgSW50ZXJ2YWxbDQogICAgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIgLSAxIHllYXIsDQogICAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQogIF0NCg0KZGVmaW5lICJTdGVwIDEgSXMgRGlhYmV0aWMgRmxhZyI6DQogICJJcyBEaWFiZXRpYyBVc2luZyBDbGFpbSBhbmQgRW5jb3VudGVyIERhdGE/Ig0KICAgIG9yICJJcyBEaWFiZXRpYyBVc2luZyBQaGFybWFjeSBEYXRhIg0KDQovKg0KICAgIENsYWltL2VuY291bnRlciBkYXRhLiBNZW1iZXJzIHdobyBtZXQgYW55IG9mIHRoZSBmb2xsb3dpbmcgY3JpdGVyaWEgZHVyaW5nIHRoZSBtZWFzdXJlbWVudCB5ZWFyDQogICAgb3IgdGhlIHllYXIgcHJpb3IgdG8gdGhlIG1lYXN1cmVtZW50IHllYXIgKGNvdW50IHNlcnZpY2VzIHRoYXQgb2NjdXIgb3ZlciBib3RoIHllYXJzKToNCiAgICAgIC0gQXQgbGVhc3QgdHdvIG91dHBhdGllbnQgdmlzaXRzIChPdXRwYXRpZW50IFZhbHVlIFNldCksIG9ic2VydmF0aW9uIHZpc2l0cyAoT2JzZXJ2YXRpb24gVmFsdWUgU2V0KSwNCiAgICAgICAgRUQgdmlzaXRzIChFRCBWYWx1ZSBTZXQpIG9yIG5vbmFjdXRlIGlucGF0aWVudCBlbmNvdW50ZXJzIChOb25hY3V0ZSBJbnBhdGllbnQgVmFsdWUgU2V0KSBvbiBkaWZmZXJlbnQNCiAgICAgICAgZGF0ZXMgb2Ygc2VydmljZSwgd2l0aCBhIGRpYWdub3NpcyBvZiBkaWFiZXRlcyAoRGlhYmV0ZXMgVmFsdWUgU2V0KS4gVmlzaXQgdHlwZSBuZWVkIG5vdCBiZSB0aGUgc2FtZQ0KICAgICAgICBmb3IgdGhlIHR3byB2aXNpdHMuDQogICAgICAtIEF0IGxlYXN0IG9uZSBhY3V0ZSBpbnBhdGllbnQgZW5jb3VudGVyIChBY3V0ZSBJbnBhdGllbnQgVmFsdWUgU2V0KSB3aXRoIGEgZGlhZ25vc2lzIG9mIGRpYWJldGVzIChEaWFiZXRlcyBWYWx1ZSBTZXQpLg0KKi8NCg0KLyoNCiAgICBUT0RPIC0gZGV0ZXJtaW5lIGJlc3QgbWV0aG9kIHRvIHVzZSBmb3IgQ2xhaW0gZGF0YQ0KICAgICAgQ3VycmVudCBiZXN0IGd1ZXNzOg0KICAgICAgQ2xhaW0gZHVyaW5nICJMb29rYmFjayBQZXJpb2QgWWVhciBQcmlvciB0byBFbmQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIiB3aXRoIERpYWJldGVzIGRpYWdub3NpcyAoc2VlICJHZXQgQ29uY2VwdCBmcm9tIENsYWltIERpYWdub3NpcyIgZnVuY3Rpb24pDQogICAgICAgIEFORCAoDQogICAgICAgICAgQXQgbGVhc3QgdHdvIG91dHBhdGllbnQgdmlzaXRzLA0KICAgICAgICAgICAgb2JzZXJ2YXRpb24gdmlzaXRzLA0KICAgICAgICAgICAgRUQgdmlzaXRzDQogICAgICAgICAgICBvciBub25hY3V0ZSBpbnBhdGllbnQgZW5jb3VudGVycw0KICAgICAgICAgICAgICBvbiBkaWZmZXJlbnQgZGF0ZXMgb2Ygc2VydmljZQ0KICAgICAgICAgIE9SIEF0IGxlYXN0IG9uZSBhY3V0ZSBpbnBhdGllbnQgZW5jb3VudGVyDQogICAgICAgICkNCiovDQoNCmRlZmluZSAiSXMgRGlhYmV0aWMgVXNpbmcgQ2xhaW0gYW5kIEVuY291bnRlciBEYXRhPyI6DQogIGlmIGV4aXN0cygiRGlhYmV0ZXMgQ29uZGl0aW9uIikNCiAgICB0aGVuICgiQ291bnQgRW5jb3VudGVycyB3aXRoIERpYWJldGVzIERpYWdub3NpcyBvbiBEaWZmZXJlbnQgRGF0ZXMgb2YgU2VydmljZSIgPj0gMg0KICAgICAgb3IgIkNvdW50IEFjdXRlIEVuY291bnRlcnMgd2l0aCBEaWFiZXRlcyBEaWFnbm9zaXMiID49IDEpDQogIGVsc2UgZmFsc2UNCg0KLy8gVE9ETyAtIEhtbW0uLi4gbmVlZCB0byB2ZXJpZnkgdGhhdCB0aGlzIG1ldGhvZCBpcyB2YWxpZA0KZGVmaW5lICJEaWFiZXRlcyBDb25kaXRpb24iOg0KICBbQ29uZGl0aW9uOiBjb2RlIGluICJEaWFiZXRlcyJdIERpYWJldGVzQ29uZGl0aW9uDQogICAgd2hlcmUgRGlhYmV0ZXNDb25kaXRpb24uY2xpbmljYWxTdGF0dXMgPSAnYWN0aXZlJw0KICAgICAgYW5kIERpYWJldGVzQ29uZGl0aW9uLnZlcmlmaWNhdGlvblN0YXR1cyA9ICdjb25maXJtZWQnDQogICAgICBhbmQgZXhpc3RzKA0KICAgICAgICBEaWFiZXRlc0NvbmRpdGlvbi5jYXRlZ29yeSBDYXRlZ29yeUNvbmNlcHRzDQogICAgICAgICAgd2hlcmUgZXhpc3RzKA0KICAgICAgICAgICAgQ2F0ZWdvcnlDb25jZXB0cy5jb2RpbmcgQ29uY2VwdENvZGVzDQogICAgICAgICAgICAgIHdoZXJlIENvbmNlcHRDb2Rlcy5jb2RlID0gJ2VuY291bnRlci1kaWFnbm9zaXMnDQogICAgICAgICAgKQ0KICAgICAgKQ0KICAgICAgYW5kIERpYWJldGVzQ29uZGl0aW9uLmFzc2VydGVkRGF0ZSBpbiBkYXkgb2YgIkxvb2tiYWNrIFBlcmlvZCBZZWFyIFByaW9yIHRvIEVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiDQoNCmRlZmluZSAiQ291bnQgRW5jb3VudGVycyB3aXRoIERpYWJldGVzIERpYWdub3NpcyBvbiBEaWZmZXJlbnQgRGF0ZXMgb2YgU2VydmljZSI6DQogIENvdW50KA0KICAgICJFbmNvdW50ZXJzIHdpdGggRGlhYmV0ZXMgRGlhZ25vc2lzIiBEaWFiZXRlc0RpYWdub3Npc0VuY291bnRlcnMNCiAgICAgIHJldHVybiBkaXN0aW5jdChEaWFiZXRlc0RpYWdub3Npc0VuY291bnRlcnMucGVyaW9kKQ0KICApDQoNCmRlZmluZSAiQ291bnQgQWN1dGUgRW5jb3VudGVycyB3aXRoIERpYWJldGVzIERpYWdub3NpcyI6DQogIENvdW50KA0KICAgICJBY3V0ZSBFbmNvdW50ZXJzIHdpdGggRGlhYmV0ZXMgRGlhZ25vc2lzIiBEaWFiZXRlc0RpYWdub3Npc0VuY291bnRlcnMNCiAgKQ0KDQpkZWZpbmUgIkVuY291bnRlcnMgd2l0aCBEaWFiZXRlcyBEaWFnbm9zaXMiOg0KICAoDQogICAgIk91dHBhdGllbnQgRW5jb3VudGVycyINCiAgICAgIHVuaW9uICJPYnNlcnZhdGlvbiBFbmNvdW50ZXJzIg0KICAgICAgdW5pb24gIkVEIEVuY291bnRlcnMiDQogICAgICB1bmlvbiAiTm9uYWN1dGUgSW5wYXRpZW50IEVuY291bnRlcnMiDQogICkgRW5jb3VudGVycw0KICAgICAgd2l0aCAiRGlhYmV0ZXMgQ29uZGl0aW9uIiBEaWFiZXRlc0NvbmRpdGlvbg0KICAgICAgICBzdWNoIHRoYXQgRW5kc1dpdGgoRW5jb3VudGVycy5kaWFnbm9zaXMuY29uZGl0aW9uLnJlZmVyZW5jZSwgRGlhYmV0ZXNDb25kaXRpb24uaWQpDQogICAgICAgICAgb3IgRW5kc1dpdGgoRGlhYmV0ZXNDb25kaXRpb24uImNvbnRleHQiLnJlZmVyZW5jZSwgRW5jb3VudGVycy5pZCkNCiAgICAgIHJldHVybiBFbmNvdW50ZXJzDQoNCmRlZmluZSAiQWN1dGUgRW5jb3VudGVycyB3aXRoIERpYWJldGVzIERpYWdub3NpcyI6DQogICJBY3V0ZSBJbnBhdGllbnQgRW5jb3VudGVycyIgRW5jb3VudGVycw0KICAgIHdpdGggIkRpYWJldGVzIENvbmRpdGlvbiIgRGlhYmV0ZXNDb25kaXRpb24NCiAgICAgIHN1Y2ggdGhhdCBFbmRzV2l0aChFbmNvdW50ZXJzLmRpYWdub3Npcy5jb25kaXRpb24ucmVmZXJlbmNlLCBEaWFiZXRlc0NvbmRpdGlvbi5pZCkNCiAgICAgICAgb3IgRW5kc1dpdGgoRGlhYmV0ZXNDb25kaXRpb24uImNvbnRleHQiLnJlZmVyZW5jZSwgRW5jb3VudGVycy5pZCkNCiAgICByZXR1cm4gRW5jb3VudGVycw0KDQpkZWZpbmUgIk91dHBhdGllbnQgRW5jb3VudGVycyI6DQogIFtFbmNvdW50ZXI6IHR5cGUgaW4gIk91dHBhdGllbnQiXSBPdXRwYXRpZW50RW5jb3VudGVycw0KICAgIHdoZXJlIE91dHBhdGllbnRFbmNvdW50ZXJzLnN0YXR1cyA9ICdmaW5pc2hlZCcNCiAgICAgIGFuZCBPdXRwYXRpZW50RW5jb3VudGVycy5wZXJpb2QgZHVyaW5nIGRheSBvZiAiTG9va2JhY2sgUGVyaW9kIFllYXIgUHJpb3IgdG8gRW5kIG9mIE1lYXN1cmVtZW50IFBlcmlvZCINCiAgICAgICAgc29ydCBieSBwZXJpb2QuInN0YXJ0IiBkZXNjDQoNCmRlZmluZSAiT2JzZXJ2YXRpb24gRW5jb3VudGVycyI6DQogIFtFbmNvdW50ZXI6IHR5cGUgaW4gIk9ic2VydmF0aW9uIl0gT2JzZXJ2YXRpb25FbmNvdW50ZXJzDQogICAgd2hlcmUgT2JzZXJ2YXRpb25FbmNvdW50ZXJzLnN0YXR1cyA9ICdmaW5pc2hlZCcNCiAgICAgIGFuZCBPYnNlcnZhdGlvbkVuY291bnRlcnMucGVyaW9kIGR1cmluZyBkYXkgb2YgIkxvb2tiYWNrIFBlcmlvZCBZZWFyIFByaW9yIHRvIEVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiDQogICAgICAgIHNvcnQgYnkgcGVyaW9kLiJzdGFydCIgZGVzYw0KDQpkZWZpbmUgIkVEIEVuY291bnRlcnMiOg0KICBbRW5jb3VudGVyOiB0eXBlIGluICJFRCJdIEVERW5jb3VudGVycw0KICAgIHdoZXJlIEVERW5jb3VudGVycy5zdGF0dXMgPSAnZmluaXNoZWQnDQogICAgICBhbmQgRURFbmNvdW50ZXJzLnBlcmlvZCBkdXJpbmcgZGF5IG9mICJMb29rYmFjayBQZXJpb2QgWWVhciBQcmlvciB0byBFbmQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgICBzb3J0IGJ5IHBlcmlvZC4ic3RhcnQiIGRlc2MNCg0KZGVmaW5lICJOb25hY3V0ZSBJbnBhdGllbnQgRW5jb3VudGVycyI6DQogIFtFbmNvdW50ZXI6IHR5cGUgaW4gIk5vbmFjdXRlIElucGF0aWVudCJdIE5vbmFjdXRlRW5jb3VudGVycw0KICAgIHdoZXJlIE5vbmFjdXRlRW5jb3VudGVycy5zdGF0dXMgPSAnZmluaXNoZWQnDQogICAgICBhbmQgTm9uYWN1dGVFbmNvdW50ZXJzLnBlcmlvZCBkdXJpbmcgZGF5IG9mICJMb29rYmFjayBQZXJpb2QgWWVhciBQcmlvciB0byBFbmQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgICBzb3J0IGJ5IHBlcmlvZC4ic3RhcnQiIGRlc2MNCg0KZGVmaW5lICJBY3V0ZSBJbnBhdGllbnQgRW5jb3VudGVycyI6DQogIFtFbmNvdW50ZXI6IHR5cGUgaW4gIk5vbmFjdXRlIElucGF0aWVudCJdIEFjdXRlRW5jb3VudGVycw0KICAgIHdoZXJlIEFjdXRlRW5jb3VudGVycy5zdGF0dXMgPSAnZmluaXNoZWQnDQogICAgICBhbmQgQWN1dGVFbmNvdW50ZXJzLnBlcmlvZCBkdXJpbmcgZGF5IG9mICJMb29rYmFjayBQZXJpb2QgWWVhciBQcmlvciB0byBFbmQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgICBzb3J0IGJ5IHBlcmlvZC4ic3RhcnQiIGRlc2MNCg0KLyoNCiAgICBQaGFybWFjeSBkYXRhLiBNZW1iZXJzIHdobyB3ZXJlIGRpc3BlbnNlZCBpbnN1bGluIG9yIGh5cG9nbHljZW1pY3MvIGFudGloeXBlcmdseWNlbWljcw0KICAgICAgb24gYW4gYW1idWxhdG9yeSBiYXNpcyBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHllYXIgb3IgdGhlIHllYXIgcHJpb3IgdG8gdGhlDQogICAgICBtZWFzdXJlbWVudCB5ZWFyIChEaWFiZXRlcyBNZWRpY2F0aW9ucyBMaXN0KS4NCiovDQoNCmRlZmluZSAiSXMgRGlhYmV0aWMgVXNpbmcgUGhhcm1hY3kgRGF0YSI6DQogIGV4aXN0cyggIk1lbWJlcnMgRGlzcGVuc2VkIERpYWJldGVzIE1lZGljYXRpb25zIER1cmluZyBTdGVwIDEgUGVyaW9kIiApDQoNCmRlZmluZSAiTWVtYmVycyBEaXNwZW5zZWQgRGlhYmV0ZXMgTWVkaWNhdGlvbnMgRHVyaW5nIFN0ZXAgMSBQZXJpb2QiOg0KICBbTWVkaWNhdGlvbkRpc3BlbnNlOiBtZWRpY2F0aW9uQ29kZWFibGVDb25jZXB0IGluICJEaWFiZXRlcyBNZWRpY2F0aW9ucyBMaXN0Il0gRGlhYmV0ZXNNZWRpY2F0aW9uRGlzcGVuc2UNCiAgICB3aGVyZSBEaWFiZXRlc01lZGljYXRpb25EaXNwZW5zZS5zdGF0dXMgPSAnY29tcGxldGVkJw0KICAgICAgYW5kIERpYWJldGVzTWVkaWNhdGlvbkRpc3BlbnNlLndoZW5IYW5kZWRPdmVyIGluIGRheSBvZiAiTG9va2JhY2sgUGVyaW9kIFllYXIgUHJpb3IgdG8gRW5kIG9mIE1lYXN1cmVtZW50IFBlcmlvZCINCg0KDQovKg0KICAgIFN0ZXAgMjoNCiAgICAgIEZyb20gdGhlIG1lbWJlcnMgaWRlbnRpZmllZCBpbiBzdGVwIDEsIGFzc2lnbiBhIGZsYWcgb2Ygbm90IGRpYWJldGljIHRvIG1lbWJlcnMgd2hvDQogICAgICAgIGRvIG5vdCBoYXZlIGEgZGlhZ25vc2lzIG9mIGRpYWJldGVzIChEaWFiZXRlcyBWYWx1ZSBTZXQpLCBpbiBhbnkgc2V0dGluZywgZHVyaW5nIHRoZQ0KICAgICAgICBtZWFzdXJlbWVudCB5ZWFyIG9yIHllYXIgcHJpb3IgdG8gdGhlIG1lYXN1cmVtZW50IHllYXIgYW5kIHdobyBoYWQgYSBkaWFnbm9zaXMgb2YNCiAgICAgICAgZ2VzdGF0aW9uYWwgZGlhYmV0ZXMgb3Igc3Rlcm9pZC1pbmR1Y2VkIGRpYWJldGVzIChEaWFiZXRlcyBFeGNsdXNpb25zIFZhbHVlIFNldCksDQogICAgICAgIGluIGFueSBzZXR0aW5nLCBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHllYXIgb3IgdGhlIHllYXIgcHJpb3IgdG8gdGhlIG1lYXN1cmVtZW50IHllYXIuDQogICAgICBOb3RlOiBNZW1iZXJzIGNsYXNzaWZpZWQgYXMgZGlhYmV0aWMgaW4gc3RlcCAxIGJhc2VkIG9uIHBoYXJtYWN5IGRhdGEgYWxvbmUgYW5kIHdobyBoYWQNCiAgICAgICAgYSBkaWFnbm9zaXMgb2YgZ2VzdGF0aW9uYWwgb3Igc3Rlcm9pZC1pbmR1Y2VkIGRpYWJldGVzIGFzIHNwZWNpZmllZCBhYm92ZSBhcmUgcmVjbGFzc2lmaWVkDQogICAgICAgIGFzIG5vdCBkaWFiZXRpYyBpbiB0aGlzIHN0ZXAuDQoqLw0KDQpkZWZpbmUgIlN0ZXAgMiBJcyBEaWFiZXRpYyBGbGFnIjoNCiAgbm90ICgNCiAgICAoDQogICAgICBub3QgIkRpYWJldGVzIERpYWdub3NpcyBpbiBBbnkgU2V0dGluZyINCiAgICAgICAgb3IgKA0KICAgICAgICAgICJJcyBEaWFiZXRpYyBVc2luZyBQaGFybWFjeSBEYXRhIg0KICAgICAgICAgICAgYW5kIG5vdCBleGlzdHMoIkVuY291bnRlcnMgd2l0aCBEaWFiZXRlcyBEaWFnbm9zaXMiKQ0KICAgICAgICApDQogICAgKQ0KICAgIGFuZCBleGlzdHMoIkhhcyBEaWFnbm9zaXMgb2YgR2VzdGF0aW9uYWwgb3IgU3Rlcm9pZC1JbmR1Y2VkIERpYWJldGVzIikNCiAgKQ0KDQpkZWZpbmUgIkRpYWJldGVzIERpYWdub3NpcyBpbiBBbnkgU2V0dGluZyI6DQogIGV4aXN0cygNCiAgICBbRW5jb3VudGVyXSBFbmNvdW50ZXJzDQogICAgICB3aXRoICJEaWFiZXRlcyBDb25kaXRpb24iIERpYWJldGVzQ29uZGl0aW9uDQogICAgICAgIHN1Y2ggdGhhdCBFbmRzV2l0aChFbmNvdW50ZXJzLmRpYWdub3Npcy5jb25kaXRpb24ucmVmZXJlbmNlLCBEaWFiZXRlc0NvbmRpdGlvbi5pZCkNCiAgICAgICAgICBvciBFbmRzV2l0aChEaWFiZXRlc0NvbmRpdGlvbi4iY29udGV4dCIucmVmZXJlbmNlLCBFbmNvdW50ZXJzLmlkKQ0KICAgICAgcmV0dXJuIEVuY291bnRlcnMNCiAgKQ0KDQpkZWZpbmUgIkhhcyBEaWFnbm9zaXMgb2YgR2VzdGF0aW9uYWwgb3IgU3Rlcm9pZC1JbmR1Y2VkIERpYWJldGVzIjoNCiAgW0NvbmRpdGlvbjogY29kZSBpbiAiRGlhYmV0ZXMgRXhjbHVzaW9ucyJdIEluZHVjZWREaWFiZXRlc0NvbmRpdGlvbg0KICAgIHdoZXJlIEluZHVjZWREaWFiZXRlc0NvbmRpdGlvbi5jbGluaWNhbFN0YXR1cyA9ICdhY3RpdmUnDQogICAgICBhbmQgSW5kdWNlZERpYWJldGVzQ29uZGl0aW9uLnZlcmlmaWNhdGlvblN0YXR1cyA9ICdjb25maXJtZWQnDQogICAgICBhbmQgSW5kdWNlZERpYWJldGVzQ29uZGl0aW9uLmFzc2VydGVkRGF0ZSBpbiBkYXkgb2YgIkxvb2tiYWNrIFBlcmlvZCBZZWFyIFByaW9yIHRvIEVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiDQoNCi8qDQogICAgU3RlcCAzOg0KICAgICAgQXNzaWduIGEgZmxhZyBvZiBub3QgZGlhYmV0aWMgdG8gbWVtYmVycyB3aG8gd2VyZSBub3QgYXNzaWduZWQgYSBmbGFnIGluIHN0ZXAgMSBvciBzdGVwIDIuDQoqLw0KDQpkZWZpbmUgIlN0ZXAgMyBJcyBEaWFiZXRpYyBGbGFnIjoNCiAgaWYgKCAiU3RlcCAxIElzIERpYWJldGljIEZsYWciIGlzIG51bGwgYW5kICJTdGVwIDIgSXMgRGlhYmV0aWMgRmxhZyIgaXMgbnVsbCApDQogICAgdGhlbiBmYWxzZQ0KICBlbHNlICJTdGVwIDEgSXMgRGlhYmV0aWMgRmxhZyIgb3IgIlN0ZXAgMiBJcyBEaWFiZXRpYyBGbGFnIg0KDQovKg0KICAgIERlbm9taW5hdG9yOg0KICAgICAgVG8gY29uZmlybSB0aGUgZGlhZ25vc2lzIG9mIGh5cGVydGVuc2lvbiwgdGhlIG9yZ2FuaXphdGlvbiBtdXN0IGZpbmQgbm90YXRpb24gb2Ygb25lIG9mDQogICAgICAgIHRoZSBmb2xsb3dpbmcgaW4gdGhlIG1lZGljYWwgcmVjb3JkIGFueXRpbWUgZHVyaW5nIHRoZSBtZW1iZXLigJlzIGhpc3Rvcnkgb24gb3IgYmVmb3JlDQogICAgICAgIEp1bmUgMzAgb2YgdGhlIG1lYXN1cmVtZW50IHllYXI6DQogICAgICAgICAgLSBIeXBlcnRlbnNpb24NCiAgICAgICAgICAtIEhUTg0KICAgICAgICAgIC0gSGlnaCBCUCAoSEJQKQ0KICAgICAgICAgIC0gRWxldmF0ZWQgQlAgKO+CrUJQKQ0KICAgICAgICAgIC0gQm9yZGVybGluZSBIVE4NCiAgICAgICAgICAtIEludGVybWl0dGVudCBIVE4NCiAgICAgICAgICAtIEhpc3Rvcnkgb2YgSFRODQogICAgICAgICAgLSBIeXBlcnRlbnNpdmUgdmFzY3VsYXIgZGlzZWFzZSAoSFZEKQ0KICAgICAgICAgIC0gSHlwZXJwaWVzaWENCiAgICAgICAgICAtIEh5cGVycGllc2lzDQogICAgICAgICAgLSBBIGRpYWdub3NpcyBjb2RlIGZvciBoeXBlcnRlbnNpb24gZG9jdW1lbnRlZCBpbiB0aGUgbWVkaWNhbCByZWNvcmQNCiAgICAgIEl0IGRvZXMgbm90IG1hdHRlciBpZiBoeXBlcnRlbnNpb24gd2FzIHRyZWF0ZWQgb3IgaXMgY3VycmVudGx5IGJlaW5nIHRyZWF0ZWQuDQogICAgICAgIFRoZSBub3RhdGlvbiBpbmRpY2F0aW5nIGEgZGlhZ25vc2lzIG9mIGh5cGVydGVuc2lvbiBtYXkgYmUgcmVjb3JkZWQgaW4gYW55DQogICAgICAgIG9mIHRoZSBmb2xsb3dpbmcgZG9jdW1lbnRzOg0KICAgICAgICAgIC0gUHJvYmxlbSBsaXN0ICh0aGlzIG1heSBpbmNsdWRlIGEgZGlhZ25vc2lzIHByaW9yIHRvIEp1bmUgMzAgb2YgdGhlIG1lYXN1cmVtZW50IHllYXINCiAgICAgICAgICAgICAgb3IgYW4gdW5kYXRlZCBkaWFnbm9zaXMgdGhhdCBpcyBub3QgcGFydCBvZiB0aGUgb2ZmaWNlIHZpc2l0IG5vdGU7IHNlZSB0aGUgTm90ZSBhdA0KICAgICAgICAgICAgICB0aGUgZW5kIG9mIHRoaXMgc2VjdGlvbikNCiAgICAgICAgICAtIE9mZmljZSBub3RlDQogICAgICAgICAgLSBTdWJqZWN0aXZlLCBPYmplY3RpdmUsIEFzc2Vzc21lbnQsIFBsYW4gKFNPQVApIG5vdGUNCiAgICAgICAgICAtIEVuY291bnRlciBmb3JtDQogICAgICAgICAgLSBEaWFnbm9zdGljIHJlcG9ydA0KICAgICAgICAgIC0gSG9zcGl0YWwgZGlzY2hhcmdlIHN1bW1hcnkNCg0KICAgICAgKiBJZiB0aGUgZGlhZ25vc2lzIG9mIGh5cGVydGVuc2lvbiBjYW5ub3QgYmUgY29uZmlybWVkLCB0aGUgbWVtYmVyIGlzIGV4Y2x1ZGVkIGFuZCByZXBsYWNlZA0KICAgICAgICBieSB0aGUgbmV4dCBtZW1iZXIgZnJvbSB0aGUgb3ZlcnNhbXBsZS4NCiovDQoNCmRlZmluZSAiRGVub21pbmF0b3IiOg0KICB0cnVlDQoNCi8qDQogICAgVXNlIG9uZSBtZWRpY2FsIHJlY29yZCBmb3IgYm90aCB0aGUgY29uZmlybWF0aW9uIG9mIHRoZSBkaWFnbm9zaXMgb2YgaHlwZXJ0ZW5zaW9uIGFuZCB0aGUNCiAgICAgIHJlcHJlc2VudGF0aXZlIEJQLiBBbGwgZWxpZ2libGUgQlAgbWVhc3VyZW1lbnRzIHJlY29yZGVkIGluIHRoZSByZWNvcmQgbXVzdCBiZSBjb25zaWRlcmVkLg0KICAgICAgTk9URSAtIElmIGFuIG9yZ2FuaXphdGlvbiBjYW5ub3QgZmluZCB0aGUgbWVkaWNhbCByZWNvcmQsIHRoZSBtZW1iZXIgcmVtYWlucyBpbiB0aGUgbWVhc3VyZQ0KICAgICAgZGVub21pbmF0b3IgYW5kIGlzIGNvbnNpZGVyZWQgbm9uY29tcGxpYW50IGZvciB0aGUgbnVtZXJhdG9yLg0KKi8NCg0KLyoNCiAgICBTdGVwIDE6DQogICAgICBJZGVudGlmeSB0aGUgbWVtYmVy4oCZcyBQQ1ANCiAgICAgICAgSWYgdGhlIG1lbWJlciBoYWQgbW9yZSB0aGFuIG9uZSBQQ1AgZm9yIHRoZSB0aW1lIHBlcmlvZCwgaWRlbnRpZnkgdGhlIFBDUCB3aG8gbW9zdCByZWNlbnRseQ0KICAgICAgICBwcm92aWRlZCBjYXJlIHRvIHRoZSBtZW1iZXINCiovDQoNCmRlZmluZSAiTWVtYmVyJ3MgUENQIjoNCiAgaWYgKCBMZW5ndGgoIlBhdGllbnQgR2VuZXJhbCBQcmFjdGl0aW9uZXJzIikgPSAxICkNCiAgICB0aGVuICJQYXRpZW50IEdlbmVyYWwgUHJhY3RpdGlvbmVycyJbMF0ucmVmZXJlbmNlDQogIGVsc2UgIkdldCBQQ1AgV2hvIE1vc3QgUmVjZW50bHkgUHJvdmlkZWQgQ2FyZSIucmVmZXJlbmNlDQoNCmRlZmluZSAiUGF0aWVudCBHZW5lcmFsIFByYWN0aXRpb25lcnMiOg0KICBQYXRpZW50LmdlbmVyYWxQcmFjdGl0aW9uZXIgcHJhY3RpdGlvbmVycw0KICAgIHdoZXJlIHByYWN0aXRpb25lcnMucmVmZXJlbmNlIGlzIG5vdCBudWxsDQoNCi8vIE5PVEUgLSB1c2luZyBFbmNvdW50ZXJzIHRvIGRldGVybWluZSBQQ1Agd2hvIG1vc3QgcmVjZW50bHkgcHJvdmlkZWQgY2FyZQ0KZGVmaW5lICJHZXQgUENQIFdobyBNb3N0IFJlY2VudGx5IFByb3ZpZGVkIENhcmUiOg0KICAoDQogICAgW0VuY291bnRlcl0gRW5jb3VudGVycw0KICAgICAgd2hlcmUgRW5jb3VudGVycy5wYXJ0aWNpcGFudCBpcyBub3QgbnVsbA0KICAgICAgICBhbmQgRW5jb3VudGVycy5zdGF0dXMgPSAnZmluaXNoZWQnDQogICAgICAgIGFuZCBFbmNvdW50ZXJzLnBlcmlvZCBkdXJpbmcgZGF5IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQogICAgICAgICAgc29ydCBieSBwZXJpb2QuInN0YXJ0IiBkZXNjDQogICkgTW9zdFJlY2VudEVuY291bnRlcnMNCiAgICAgIHJldHVybiBGaXJzdCgNCiAgICAgICAgTW9zdFJlY2VudEVuY291bnRlcnMucGFydGljaXBhbnQgcGFydGljaXBhbnRzDQogICAgICAgICAgd2hlcmUgcGFydGljaXBhbnRzLmluZGl2aWR1YWwgaXMgbm90IG51bGwNCiAgICAgICAgICAgIGFuZCBwYXJ0aWNpcGFudHMuaW5kaXZpZHVhbC5yZWZlcmVuY2UgaXMgbm90IG51bGwNCiAgICAgICAgICAgIHJldHVybiBwYXJ0aWNpcGFudHMuaW5kaXZpZHVhbA0KICAgICAgKQ0KDQovKg0KICAgIFN0ZXAgMjoNCiAgICAgIFVzZSBvbmUgbWVkaWNhbCByZWNvcmQgdG8gYm90aCBjb25maXJtIHRoZSBkaWFnbm9zaXMgZm9yIHRoZSBkZW5vbWluYXRvciBhbmQgaWRlbnRpZnkgdGhlDQogICAgICAgIHJlcHJlc2VudGF0aXZlIEJQIGxldmVsIGZvciB0aGUgbnVtZXJhdG9yLg0KICAgICAgVE9ETyAtIGFjY291bnQgZm9yIGNpcnVtc3RhbmNlcyB3aGVuIDIgcmVjb3JkcyBhcmUgbmVlZGVkIHRvIGVpdGhlciBjb25maXJtIHRoZSBkaWFnbm9zaXMgb3Igb2J0YWluIHRoZSBCUCByZWFkaW5nDQoqLw0KDQovLyBUT0RPDQoNCi8qDQogICAgTnVtZXJhdG9yOg0KICAgIFRoZSBudW1iZXIgb2YgbWVtYmVycyBpbiB0aGUgZGVub21pbmF0b3Igd2hvc2UgbW9zdCByZWNlbnQgQlAgKGJvdGggc3lzdG9saWMgYW5kIGRpYXN0b2xpYykgaXMgYWRlcXVhdGVseQ0KICAgICAgY29udHJvbGxlZCBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHllYXIgYmFzZWQgb24gdGhlIGZvbGxvd2luZyBjcml0ZXJpYToNCiAgICAgICAgLSBNZW1iZXJzIDE44oCTNTkgeWVhcnMgb2YgYWdlIGFzIG9mIERlY2VtYmVyIDMxIG9mIHRoZSBtZWFzdXJlbWVudCB5ZWFyIHdob3NlIEJQIHdhcyA8MTQwLzkwIG1tIEhnLg0KICAgICAgICAtIE1lbWJlcnMgNjDigJM4NSB5ZWFycyBvZiBhZ2UgYXMgb2YgRGVjZW1iZXIgMzEgb2YgdGhlIG1lYXN1cmVtZW50IHllYXIgd2hvIHdlcmUgZmxhZ2dlZCB3aXRoIGENCiAgICAgICAgICBkaWFnbm9zaXMgb2YgZGlhYmV0ZXMgYW5kIHdob3NlIEJQIHdhcyA8MTQwLzkwIG1tIEhnLg0KICAgICAgICAtIE1lbWJlcnMgNjDigJM4NSB5ZWFycyBvZiBhZ2UgYXMgb2YgRGVjZW1iZXIgMzEgb2YgdGhlIG1lYXN1cmVtZW50IHllYXIgd2hvIHdlcmUgZmxhZ2dlZCBhcyBub3QgaGF2aW5nDQogICAgICAgICAgYSBkaWFnbm9zaXMgb2YgZGlhYmV0ZXMgYW5kIHdob3NlIEJQIHdhcyA8MTUwLzkwIG1tIEhnLg0KICAgICAgVG8gZGV0ZXJtaW5lIGlmIHRoZSBtZW1iZXLigJlzIEJQIGlzIGFkZXF1YXRlbHkgY29udHJvbGxlZCwgdGhlIHJlcHJlc2VudGF0aXZlIEJQIG11c3QgYmUgaWRlbnRpZmllZC4NCiovDQoNCi8qDQogICAgU3RlcCAxOg0KICAgIElkZW50aWZ5IHRoZSBtb3N0IHJlY2VudCBCUCByZWFkaW5nIG5vdGVkIGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgeWVhci4gVGhlIHJlYWRpbmcgbXVzdCBvY2N1ciBhZnRlciB0aGUNCiAgICAgIGRhdGUgd2hlbiB0aGUgZGlhZ25vc2lzIG9mIGh5cGVydGVuc2lvbiB3YXMgY29uZmlybWVkLg0KICAgIERvIG5vdCBpbmNsdWRlIEJQIHJlYWRpbmdzOiBUT0RPDQogICAgICAtIFRha2VuIGR1cmluZyBhbiBhY3V0ZSBpbnBhdGllbnQgc3RheSBvciBhbiBFRCB2aXNpdC4NCiAgICAgIC0gVGFrZW4gb24gdGhlIHNhbWUgZGF5IGFzIGEgZGlhZ25vc3RpYyB0ZXN0IG9yIGRpYWdub3N0aWMgb3IgdGhlcmFwZXV0aWMgcHJvY2VkdXJlIHRoYXQgcmVxdWlyZXMgYQ0KICAgICAgICBjaGFuZ2UgaW4gZGlldCBvciBjaGFuZ2UgaW4gbWVkaWNhdGlvbiBvbiBvciBvbmUgZGF5IGJlZm9yZSB0aGUgZGF5IG9mIHRoZSB0ZXN0IG9yIHByb2NlZHVyZSwgd2l0aA0KICAgICAgICB0aGUgZXhjZXB0aW9uIG9mIGZhc3RpbmcgYmxvb2QgdGVzdHMuDQogICAgICAtIFJlcG9ydGVkIGJ5IG9yIHRha2VuIGJ5IHRoZSBtZW1iZXIuDQogICAgSWYgbXVsdGlwbGUgcmVhZGluZ3Mgd2VyZSByZWNvcmRlZCBmb3IgYSBzaW5nbGUgZGF0ZSwgdXNlIHRoZSBsb3dlc3Qgc3lzdG9saWMgYW5kIGxvd2VzdCBkaWFzdG9saWMgQlANCiAgICAgIG9uIHRoYXQgZGF0ZSBhcyB0aGUgcmVwcmVzZW50YXRpdmUgQlAuIFRoZSBzeXN0b2xpYyBhbmQgZGlhc3RvbGljIHJlc3VsdHMgZG8gbm90IG5lZWQgdG8gYmUgZnJvbQ0KICAgICAgdGhlIHNhbWUgcmVhZGluZy4gVE9ETw0KKi8NCg0KZGVmaW5lICJNb3N0IFJlY2VudCBCUCBSZWFkaW5ncyI6DQogIFtPYnNlcnZhdGlvbjogIkJsb29kIFByZXNzdXJlIl0gQlBPYnNlcnZhdGlvbg0KICAgIHdoZXJlIEJQT2JzZXJ2YXRpb24uZWZmZWN0aXZlIGluIGRheSBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgYW5kIChCUE9ic2VydmF0aW9uLmVmZmVjdGl2ZSBhcyBkYXRlVGltZSkgYWZ0ZXIgZGF5IG9mIEZpcnN0KCJIeXBlcnRlbnNpb24gRGlhZ25vc2lzIikuYXNzZXJ0ZWREYXRlDQogICAgICAgIHNvcnQgYnkgZWZmZWN0aXZlIGRlc2MNCg0KLyoNCiAgICBTdGVwIDI6DQogICAgICBEZXRlcm1pbmUgbnVtZXJhdG9yIGNvbXBsaWFuY2UgdXNpbmcgdGhlIGNyaXRlcmlhIGluIHRoZSBOdW1lcmF0b3Igc2VjaXRpb24gYWJvdmUuDQogICAgICBUaGUgbWVtYmVyIGlzIG5vdCBjb21wbGlhbnQgaWYgdGhlIEJQIHJlYWRpbmcgZG9lcyBub3QgbWVldCB0aGUgc3BlY2lmaWVkIHRocmVzaG9sZCBvciBpcyBtaXNzaW5nLA0KICAgICAgICBpZiB0aGVyZSBpcyBubyBCUCByZWFkaW5nIGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgeWVhciBvciBpZiB0aGUgcmVhZGluZyBpcyBpbmNvbXBsZXRlDQogICAgICAgIChlLmcuLCB0aGUgc3lzdG9saWMgb3IgZGlhc3RvbGljIGxldmVsIGlzIG1pc3NpbmcpLg0KKi8NCg0KLyoNCiAgICBOT1RFDQogICAgSSBjYW4gaW1hZ2luZSBhIGNvdXBsZSBvZiBkaWZmZXJlbnQgd2F5cyBhbiBPYnNlcnZhdGlvbiBjb3VsZCByZXByZXNlbnQgYmxvb2QgcHJlc3N1cmUgdmFsdWVzOg0KICAgICAgLSBPYnNlcnZhdGlvbiB3aXRoIGEgdmFsdWVSYXRpbyAoU3lzdG9saWMvRGlhc3RvbGljKQ0KICAgICAgLSBPYnNlcnZhdGlvbiB3aXRoIGNvbXBvbmVudCB2YWx1ZXMgZm9yIFN5c3RvbGljIGFuZCBEaWFzdG9saWMNCiovDQoNCg0KDQovKg0KDQogICAgSGVscGVyIGZ1bmN0aW9ucw0KDQoqLw0KDQpkZWZpbmUgZnVuY3Rpb24gIkdldCBDb25jZXB0IGZyb20gQ2xhaW0gRGlhZ25vc2lzIih2YWx1ZSBDaG9pY2U8RkhJUi5Db2RlYWJsZUNvbmNlcHQsIEZISVIuUmVmZXJlbmNlPik6DQogIGlmIHZhbHVlIGlzIEZISVIuQ29kZWFibGVDb25jZXB0DQogICAgdGhlbiB2YWx1ZQ0KICBlbHNlICgNCiAgICAiRGlhYmV0ZXMgQ29uZGl0aW9uIiBEQw0KICAgICAgd2hlcmUgRW5kc1dpdGgodmFsdWUucmVmZXJlbmNlLCBEQy5pZCkNCiAgICAgIHJldHVybiBEQy5jb2RlDQogICkNCg=="
    }
  ]
}