{
  "resourceType": "Library",
  "id": "library-participation-logic",
  "text": {
      "status": "generated",
      "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-participation-logic/_history/11</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span>http://ncqa.org/hedis/identifiers</span><br/><b>value: </b><span>L-PRT</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.000</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Participation - Logic Library (FHIR)</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr><th scope=\"row\"><b>Description: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">This library contains the logic for determining participation and enrollment for HEDIS measures.</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Contributor: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b><span>author</span>: </b><span>National Committee for Quality Assurance</span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"6\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.46</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.44</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.46</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.44</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library Participation version '1.0.0'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0'\r\n\r\nvalueset \"NCQA Payer\": 'http://ncqa.org/fhir/hedis/ValueSet/ncqa-payer' //'urn:oid:2.16.840.1.113762.1.4.1165.42'\r\nvalueset \"Commercial\": 'urn:oid:2.16.840.1.113762.1.4.1165.46'\r\nvalueset \"Medicaid\": 'urn:oid:2.16.840.1.113762.1.4.1165.45'\r\nvalueset \"Medicare\": 'urn:oid:2.16.840.1.113762.1.4.1165.44'\r\n\r\ncontext Patient\r\n\r\ndefine \"Medicaid Product\":\r\n  'medicaid'\r\n\r\ndefine \"Commercial Product\":\r\n  'commercial'\r\n\r\ndefine \"Medicare Product\":\r\n  'medicare'\n\n/*\n  Report in the product line based on which product they are enrolled in at a given date\n\t(generally the end of the measurement period) but continuous enrollment calculations\n\tshould consider all participation periods, regardless of product\n\t\n\tInput parameters:\n\t\tProduct Line: The product line being reported\n\t\tIndex Date: Generally measurement period, but could be tied to an event\n\t\tParticipation Period: Generally one year, two years, or twenty seven months, but could be based on an event\n\t\tAllowed Gap Days: Generally 45 days, but could be 0\n\t\t\n\tExample 1 - One year continuously enrolled\n\t\t\"Is Enrolled\"(ProductLine, end of \"Measurement Period\", \"Measurement Period\", 45)\n\t\t\n\tExample 2 - Two years continuously enrolled\n\t  \"Is Enrolled\"(ProductLine, end of \"Measurement Period\", Interval[start of \"Measurement Period\" - 1 year, end of \"Measurement Period\"], 45)\n\t\t\n\tExample 3 - Twenty seven months continuously enrolled\n\t\t\"Is Enrolled\"(ProductLine, end of \"Measurement Period\", Interval[start of \"Measurement Period\" - 2 years - 3 months, end of \"Measurement Period\"], 45)\n\t\t\n\tExample 4 - Continuously enrolled surrounding an index event such as a heart attack\n\t\t\"Is Enrolled\"(ProductLine, \"Date of Heart Attack\", Interval[\"Date of Heart Attack\", \"Date of Heart Attack\" + 18 months], 45)\n\t\t\n\tExample 5 - Continuously enrolled with no gaps during the 9 months prior to a birth and for the following year, allowing for a gap\n\t  \"Is Enrolled\"(ProductLine, \"Date Of Delivery\", Interval[\"Date Of Delivery\" - 9 months, \"Date Of Delivery\"], 0)\n\t\t  and \"Is Enrolled\"(ProductLine, \"Date Of Delivery\", Interval[\"Date Of Delivery\", \"Date Of Delivery\" + 1 year], 45)\n*/\r\n\r\ndefine function \"Is Enrolled\"(ProductLine String, IndexDate DateTime, ParticipationPeriod Interval&lt;DateTime&gt;, AllowedGapDays Integer):\r\n  case\n\t\t/* If this is not running for a specific product line, ignore enrollment considerations */\r\n    when ProductLine is null then true \r\n    else\n\t\t\t/* Is the patient enrolled in the given product line on the given index date? */ \"Is Enrolled On Date\"(ProductLine, IndexDate)\n\t\t\t/* Is the patient continuously enrolled in every year of the participation period */\r\n    and AllTrue((\"Enrollment Periods\"(ParticipationPeriod))EnrollmentPeriod\r\n        return \"Is Continuously Enrolled In Period\"(EnrollmentPeriod, if duration in months of EnrollmentPeriod &gt;= 6 then AllowedGapDays \r\n            else 0\r\n        )\r\n    )\r\n  end\n\t\n/*\nReturns all Commercial, Medicaid, and Medicare participation for the patient\n*/\r\n\r\ndefine \"Participation\":\r\n  [\"Coverage\": type in \"Commercial\"]\r\n    union [\"Coverage\": type in \"Medicaid\"]\r\n    union [\"Coverage\": type in \"Medicare\"]\r\n\r\ndefine function \"Is Enrolled On Date\"(ProductLine String, IndexDate DateTime):\r\n  exists ( ( case ProductLine\r\n      when \"Commercial Product\" then [\"Coverage\": type in \"Commercial\"]\r\n      when \"Medicare Product\" then [\"Coverage\": type in \"Medicare\"]\r\n      when \"Medicaid Product\" then [\"Coverage\": type in \"Medicaid\"] \r\n      else null \r\n    end ) P\r\n      where IndexDate during P.period\r\n  )\n\n/*\nReturns enrollment periods of up to a year ending at the end of the participation period.\nNote that this will not return more than 3 years (would need the expand from 1.3 to support more generally)\n\nFor example, given the following participation period:\n\n        10/1/16 1/1/17       1/1/18      12/31/18\n            [---||------------||------------]\n\nThe function will return the following enrollment periods:\n\n            [---][------------][------------]\n\t\t\t\t\t\t\nIn values:\nParticipation Period: Interval[@2016-10-01, @2018-12-31]\nEnrollment Periods: { Interval[@2016-10-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31] Interval[@2018-01-01, @2018-12-31] }\n*/\r\n\r\ndefine function \"Enrollment Periods\"(ParticipationPeriod Interval&lt;DateTime&gt;):\r\n  ( { 3 years, 2 years, 1 year } ) Year\r\n    where \r\n    end of ParticipationPeriod - ( Year - 1 year ) after start of ParticipationPeriod\r\n    return Interval[Max({ successor of(\r\n        end of ParticipationPeriod - Year\r\n      ), start of ParticipationPeriod }\r\n    ), \r\n    end of ParticipationPeriod - ( Year - 1 year )]\n\n/*\n//Tests:\ndefine TestTwentySevenMonthParticipationPeriod: Interval[@2016-10-01, @2018-12-31]\ndefine TestExpectedTwentySevenMonthEnrollmentPeriods: { Interval[@2016-10-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestTwentySevenMonthEnrollmentPeriods: \"Enrollment Periods\"(TestTwentySevenMonthParticipationPeriod)\ndefine TestTwentySevenMonthPass: TestTwentySevenMonthEnrollmentPeriods = TestExpectedTwentySevenMonthEnrollmentPeriods\n\ndefine TestThreeYearParticipationPeriod: Interval[@2016-01-01, @2018-12-31]\ndefine TestExpectedThreeYearEnrollmentPeriods: { Interval[@2016-01-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestThreeYearEnrollmentPeriods: \"Enrollment Periods\"(TestThreeYearParticipationPeriod)\ndefine TestThreeYearPass: TestThreeYearEnrollmentPeriods = TestExpectedThreeYearEnrollmentPeriods\n\ndefine TestTwoYearParticipationPeriod: Interval[@2017-01-01, @2018-12-31]\ndefine TestExpectedTwoYearEnrollmentPeriods: { Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestTwoYearEnrollmentPeriods: \"Enrollment Periods\"(TestTwoYearParticipationPeriod)\ndefine TestTwoYearPass: TestTwoYearEnrollmentPeriods = TestExpectedTwoYearEnrollmentPeriods\n\ndefine TestOneYearParticipationPeriod: Interval[@2018-01-01, @2018-12-31]\ndefine TestExpectedOneYearEnrollmentPeriods: { Interval[@2018-01-01, @2018-12-31] }\ndefine TestOneYearEnrollmentPeriods: \"Enrollment Periods\"(TestOneYearParticipationPeriod)\ndefine TestOneYearPass: TestOneYearEnrollmentPeriods = TestExpectedOneYearEnrollmentPeriods\n\ndefine TestNineMonthParticipationPeriod: Interval[@2018-03-01, @2018-12-31]\ndefine TestExpectedNineMonthEnrollmentPeriods: { Interval[@2018-03-01, @2018-12-31] }\ndefine TestNineMonthEnrollmentPeriods: \"Enrollment Periods\"(TestNineMonthParticipationPeriod)\ndefine TestNineMonthPass: TestNineMonthEnrollmentPeriods = TestExpectedNineMonthEnrollmentPeriods\n*/\n\n/*\nReturns the periods during which the patient had coverage during the given participation period\t\n*/\r\n\r\ndefine function \"Participation In Period\"(ParticipationPeriod Interval&lt;DateTime&gt;):\r\n  collapse ( Participation P\r\n      where P.period overlaps ParticipationPeriod\r\n      return all P.period\r\n        intersect ParticipationPeriod\r\n  )\n\n/*\nReturns the number of gap days in the given coverage periods, allowing only one gap.\nIf there is more than one gap, returns the maximum Integer\n*/\r\n\r\ndefine function \"Gap Days In Period\"(ParticipationPeriod Interval&lt;DateTime&gt;, Periods List&lt;Interval&lt;DateTime&gt;&gt;):\r\n  case Count(Periods)\r\n    when 1 then if Periods[0]starts day of ParticipationPeriod then difference in days between \r\n    end of Periods[0]and \r\n    end of ParticipationPeriod \r\n      else if Periods[0]ends day of ParticipationPeriod then difference in days between start of ParticipationPeriod and start of Periods[0]\r\n      else maximum Integer\r\n    when 2 then if Periods[0]starts day of ParticipationPeriod\r\n      and Periods[1]ends day of ParticipationPeriod then difference in days between \r\n    end of Periods[0]and start of Periods[1]\r\n      else maximum Integer \r\n    else maximum Integer \r\n  end\n\n/*\n//Tests:\ndefine TestParticipationPeriod: Interval[@2017-01-01, @2017-12-31]\ndefine Test1CoveragePeriods: { Interval[@2017-01-01, @2017-12-31] }\ndefine Test2CoveragePeriods: { Interval[@2017-01-01, @2017-12-15] }\ndefine Test3CoveragePeriods: { Interval[@2017-01-15, @2017-12-31] }\ndefine Test4CoveragePeriods: { Interval[@2017-01-01, @2017-11-15] }\ndefine Test5CoveragePeriods: { Interval[@2017-02-15, @2017-12-31] }\ndefine Test6CoveragePeriods: { Interval[@2017-01-01, @2017-10-15] }\ndefine Test7CoveragePeriods: { Interval[@2017-03-15, @2017-12-31] }\ndefine Test8CoveragePeriods: { Interval[@2017-01-15, @2017-11-15] }\ndefine Test9CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-02-15, @2017-12-31] }\ndefine Test10CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-03-15, @2017-12-31] }\ndefine Test11CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-02-15, @2017-06-14], Interval[@2017-07-15, @2017-12-31] }\ndefine Test1CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test1CoveragePeriods)\ndefine Test2CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test2CoveragePeriods)\ndefine Test3CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test3CoveragePeriods)\ndefine Test4CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test4CoveragePeriods)\ndefine Test5CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test5CoveragePeriods)\ndefine Test6CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test6CoveragePeriods)\ndefine Test7CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test7CoveragePeriods)\ndefine Test8CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test8CoveragePeriods)\ndefine Test9CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test9CoveragePeriods)\ndefine Test10CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test10CoveragePeriods)\ndefine Test11CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test11CoveragePeriods)\ndefine Test1ExpectedGap: 0\ndefine Test2ExpectedGap: 16\ndefine Test3ExpectedGap: 14\ndefine Test4ExpectedGap: 46\ndefine Test5ExpectedGap: 45\ndefine Test6ExpectedGap: 77\ndefine Test7ExpectedGap: 73\ndefine Test8ExpectedGap: maximum Integer\ndefine Test9ExpectedGap: 32\ndefine Test10ExpectedGap: 60\ndefine Test11ExpectedGap: maximum Integer\n*/\r\n\r\ndefine function \"Is Continuously Enrolled In Period\"(EnrollmentPeriod Interval&lt;DateTime&gt;, AllowedGapDays Integer):\r\n  \"Gap Days In Period\"(EnrollmentPeriod, \"Participation In Period\"(EnrollmentPeriod))&lt;= AllowedGapDays\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
  },
  "url": "http://ncqa.org/fhir/hedis/Library/library-participation-logic",
  "identifier": [
      {
          "system": "http://ncqa.org/hedis/identifiers",
          "value": "Library_PRT"
      }
  ],
  "version": "1.0.0",
  "name": "Participation_FHIR",
  "title": "Participation - Logic Library (FHIR)",
  "status": "active",
  "experimental": true,
  "type": {
      "coding": [
          {
              "code": "logic-library"
          }
      ]
  },
  "date": "2018-08-01",
  "publisher": "National Committee for Quality Assurance",
  "description": "This library contains the logic for determining participation and enrollment for HEDIS measures.",
  "approvalDate": "2018-11-12",
  "lastReviewDate": "2018-11-12",
  "effectivePeriod": {
      "start": "2018-01-01",
      "end": "2018-12-31"
  },
  "jurisdiction": [
      {
          "coding": [
              {
                  "system": "urn:iso:std:iso:3166",
                  "code": "US",
                  "display": "United States of America"
              }
          ],
          "text": "United States of America (the)"
      }
  ],
  "contributor": [
      {
          "type": "author",
          "name": "National Committee for Quality Assurance"
      }
  ],
  "contact": [
      {
          "telecom": [
              {
                  "system": "url",
                  "value": "http://ncqa.org"
              }
          ]
      }
  ],
  "copyright": "HEDIS® is a registered trademark of the National Committee for Quality Assurance (NCQA). The HEDIS measures and specifications were developed by and are owned by the National Committee for Quality Assurance (“NCQA”). NCQA holds a copyright in the HEDIS measures and specifications and may rescind or alter these measures and specifications at any time. Users of the HEDIS measures and specifications shall not have the right to alter, enhance or otherwise modify the HEDIS measures and specifications, and shall not disassemble, recompile or reverse engineer the HEDIS measures and specifications. Anyone desiring to use or reproduce the materials without modification for a non-commercial purpose may do so without obtaining any approval from NCQA. All commercial uses or requests for alteration of the HEDIS measures and specifications must be approved by NCQA and are subject to a license at the discretion of NCQA. HEDIS measures and specifications are not clinical guidelines, do not establish a standard of medical care and have not been tested for all potential applications. The measures and specifications are provided “as is” without warranty of any kind. NCQA makes no representations, warranties or endorsements about the quality of any product, test or protocol identified as numerator compliant or otherwise identified as meeting the requirements of a HEDIS measure or specification. NCQA also makes no representations, warranties or endorsements about the quality of any organization or clinician who uses or reports performance measures. NCQA has no liability to anyone who relies on HEDIS measures and specifications or data reflective of performance under such measures and specifications. No measure rate resulting from calculations based on the HEDIS specifications may be called a HEDIS rate until it is audited and approved by an NCQA-certified HEDIS auditor. Until NCQA has approved a validation process and validates a calculated measure rate, users must prominently display a disclaimer near each uncertified calculated rate. Henceforth in this publication and in any other NCQA publication, “HEDIS measure” refers to the specifications and “HEDIS data” refers to and assumes data audited by an NCQA-certified auditor. Limited proprietary coding is contained in the measure specifications for convenience. Users of the proprietary code sets should obtain all necessary licenses from the owners of these code sets. NCQA disclaims all liability for use or accuracy of any coding contained in the specifications.The American Medical Association holds a copyright to the CPT® codes contained in the measures specifications. Some measure specifications contain coding from LOINC® ([http://loinc.org](http://loinc.org)). The LOINC table, LOINC codes, LOINC panels and form file, LOINC linguistic variants file, LOINC/RSNA Radiology Playbook, and LOINC/IEEE Medical Device Code Mapping Table are copyright © 1995–2017, Regenstrief Institute, Inc. and the Logical Observation Identifiers Names and Codes (LOINC) Committee and is available at no cost under the license at [http://loinc.org/terms-of-use](http://loinc.org/terms-of-use). No part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopy, recording or any information storage and retrieval system, without the written permission of NCQA. © 2018 by the National Committee for Quality Assurance, all rights reserved.",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": {
        "reference": "Library/library-fhir-helpers"
      }
    }
  ],
  "dataRequirement": [
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
        }
      ]
    },
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
        }
      ]
    },
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
        }
      ]
    },
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
        }
      ]
    },
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
        }
      ]
    },
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}